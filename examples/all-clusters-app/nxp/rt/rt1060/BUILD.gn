# Copyright (c) 2021-2023 Project CHIP Authors
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("//build_overrides/build.gni")
import("//build_overrides/chip.gni")
import("//build_overrides/nxp_sdk.gni")
import("//build_overrides/openthread.gni")
import("${chip_root}/src/platform/device.gni")

#allows to get common NXP SDK gn options
import("${nxp_sdk_build_root}/nxp_sdk.gni")

# Allows to get various RT gn options
import("${nxp_sdk_build_root}/${nxp_sdk_name}/rt_sdk.gni")

import("${chip_root}/src/platform/nxp/${nxp_platform}/args.gni")
import(
    "${nxp_sdk_build_root}/${nxp_sdk_name}/${rt_platform}/${rt_platform}.gni")
import("${nxp_sdk_build_root}/${nxp_sdk_name}/nxp_executable.gni")

assert(current_os == "freertos")
assert(target_os == "freertos")
assert(nxp_platform == "rt/rt1060")

declare_args() {
  # Allows to enable to ota_provider support
  enable_ota_provider = false

  # Allows to start the tcp download test app
  tcp_download = false

  # Allows to start the wifi connect test app
  wifi_connect = false

  # The 2 params below are used only if tcp_download or wifi_connect are true, otherwise they're unused.
  wifi_ssid = "" 
  wifi_password = "" 

  # Setup discriminator as argument
  setup_discriminator = 3840
}

example_platform_dir = "${chip_root}/examples/platform/nxp/${nxp_platform}"
common_example_dir = "${chip_root}/examples/platform/nxp/common"

if (tcp_download == true && wifi_connect == true) {
  assert("Cannot enable tcp_download and wifi_connect at the same time!")
}

app_common_folder = "all-clusters-app/all-clusters-common"

# Create here the SDK instance.
# Particular sources/defines/includes could be added/changed depending on the target application.
rt_sdk("sdk") {
  defines = ["CPU_MIMXRT106SDVL6A", "CPU_MIMXRT106SDVL6A_cm7"]
  defines += ["XIP_BOOT_HEADER_DCD_ENABLE=1", "XIP_EXTERNAL_FLASH=1", "XIP_BOOT_HEADER_ENABLE=1"]
  defines += ["SKIP_SYSCLK_INIT"]
  defines += ["SDK_OS_FREE_RTOS", "USE_RTOS"]
  defines += ["SDK_SAI_BASED_COMPONENT_USED=1", "ENABLE_WIFI=0", "SDIO_ENABLED"]
  defines += ["SDK_I2C_BASED_COMPONENT_USED=1", "USE_MQS=1", "SERIAL_PORT_TYPE_UART=1"]
  defines += ["DEBUG_CONSOLE_RX_ENABLE=0", "SDK_DEBUGCONSOLE_UART=1", "SDK_DEBUGCONSOLE=1"]
  defines += ["CONFIG_FLEXRAM_AT_STARTUP=1"]
  defines += ["RELOCATE_VECTOR_TABLE=1"]
  defines += ["FSL_SDK_ENABLE_DRIVER_CACHE_CONTROL=1"]
  cflags = ["-imacrosapp.h"]
  public_deps = []
  public_configs = []
  sources = []
  include_dirs = []

  # Indicate include paths
  include_dirs += [ "${example_platform_dir}/board/" ]
  include_dirs += [ "${example_platform_dir}/board/evkbmimxrt1060/" ]
  include_dirs += [ "${example_platform_dir}/app/drivers" ]
  include_dirs += [ "${example_platform_dir}/app/source" ]
  include_dirs += [ "${example_platform_dir}/app/project_include" ]
  include_dirs += [ "${example_platform_dir}/app/usb/phy" ]
  include_dirs += [ "${example_platform_dir}/app/usb/device/include" ]
  include_dirs += [ "${example_platform_dir}/app/usb/device/source" ]
  include_dirs += [ "${example_platform_dir}/app/usb/device/source/ehci" ]
  include_dirs += [ "${example_platform_dir}/app/usb/include" ]
  include_dirs += [ "${example_platform_dir}/app/usb/device/class" ]
  include_dirs += [ "${example_platform_dir}/app/usb/device/class/cdc" ]
  include_dirs += [ "${example_platform_dir}/app/component/serial_manager/usb_cdc_adapter" ]
  include_dirs += [ "${example_platform_dir}/app/component/serial_manager/" ]
  include_dirs += [ "${example_platform_dir}/app/local_voice/" ]
  include_dirs += [ "${example_platform_dir}/app/local_voice/DSMT" ]
  include_dirs += [ "${example_platform_dir}/app/local_voice/DSMT/en" ]
  include_dirs += [ "${example_platform_dir}/app/local_voice/VIT" ]
  include_dirs += [ "${example_platform_dir}/app/local_voice/VIT/en" ]
  include_dirs += [ "${example_platform_dir}/app/local_voice/S2I" ]
  include_dirs += [ "${example_platform_dir}/app/local_voice/S2I/en" ]
  include_dirs += [ "${example_platform_dir}/app/audio" ]
  include_dirs += [ "${example_platform_dir}/app/audio/audio_processing" ]
  include_dirs += [ "${example_platform_dir}/app/audio/prompts" ]
  include_dirs += [ "${example_platform_dir}/app/audio/rdsp_includes" ]
  include_dirs += [ "${example_platform_dir}/app/audio/rdsp_utilities_public/include" ]
  include_dirs += [ "${example_platform_dir}/app/audio/rdsp_utilities_public/rdsp_memory_utils_public" ]
  include_dirs += [ "${example_platform_dir}/app/audio/sln_afe" ]
  include_dirs += [ "${example_platform_dir}/app/audio/VIT" ]
  include_dirs += [ "${example_platform_dir}/app/audio/VIT/Inc" ]
  include_dirs += [ "${example_platform_dir}/app/codec" ]
  include_dirs += [ "${example_platform_dir}/app/audio_streamer" ]
  include_dirs += [ "${example_platform_dir}/app/audio_streamer/inc" ]
  include_dirs += [ "${example_platform_dir}/app/cjson/inc" ]
  include_dirs += [ "${example_platform_dir}/app/CMSIS" ]
  include_dirs += [ "${example_platform_dir}/app/libs" ]
  
  # Board dir
  sources += [ "${example_platform_dir}/board/evkbmimxrt1060/pin_mux.c" ]
  sources += [ "${example_platform_dir}/board/hardware_init.c" ]
  sources += [ "${example_platform_dir}/board/clock_config.c" ]
  sources += [ "${example_platform_dir}/board/board.c" ]
  sources += [ "${example_platform_dir}/board/peripherals.c" ]
  sources += [ "${example_platform_dir}/board/dcd.c" ]

  # Drivers dir
  sources += [ "${example_platform_dir}/app/drivers/flexspi_nor_flash_ops.c" ]
  sources += [ "${example_platform_dir}/app/drivers/fsl_flexio.c" ]
  sources += [ "${example_platform_dir}/app/drivers/fsl_gpt.c" ]
  sources += [ "${example_platform_dir}/app/drivers/fsl_sai.c" ]
  sources += [ "${example_platform_dir}/app/drivers/fsl_sai_edma.c" ]
  sources += [ "${example_platform_dir}/app/drivers/fsl_flexram.c" ]
  sources += [ "${example_platform_dir}/app/drivers/fsl_flexram_allocate.c" ]

  # usb
  sources += [ "${example_platform_dir}/app/usb/phy/usb_phy.c" ]
  sources += [ "${example_platform_dir}/app/usb/device/source/usb_device_ch9.c" ]
  sources += [ "${example_platform_dir}/app/usb/device/source/usb_device_dci.c" ]
  sources += [ "${example_platform_dir}/app/usb/device/source/ehci/usb_device_ehci.c" ]
  sources += [ "${example_platform_dir}/app/usb/device/class/usb_device_class.c" ]
  sources += [ "${example_platform_dir}/app/usb/device/class/cdc/usb_device_cdc_acm.c" ]

  # codec
  sources += [ "${example_platform_dir}/app/codec/fsl_codec_adapter.c" ]
  sources += [ "${example_platform_dir}/app/codec/fsl_codec_common.c" ]

  # component
  sources += [ "${example_platform_dir}/app/component/serial_manager/usb_cdc_adapter/usb_device_descriptor.c" ]
  sources += [ "${example_platform_dir}/app/component/serial_manager/fsl_component_serial_manager.c" ]
  sources += [ "${example_platform_dir}/app/component/serial_manager/fsl_component_serial_port_usb.c" ]
  sources += [ "${example_platform_dir}/app/component/serial_manager/fsl_component_serial_port_uart.c" ]

  # local_voice
  sources += [ "${example_platform_dir}/app/local_voice/S2I/demo_definitions_s2i.h" ]
  sources += [ "${example_platform_dir}/app/local_voice/S2I/en/VIT_Model_en_Home.h" ]
  sources += [ "${example_platform_dir}/app/local_voice/IndexCommands.c" ]
  sources += [ "${example_platform_dir}/app/local_voice/DSMT/voice_demos_dsmt.c" ]
  sources += [ "${example_platform_dir}/app/local_voice/DSMT/demo_definitions_dsmt.h" ]
  sources += [ "${example_platform_dir}/app/local_voice/DSMT/demo_actions_dsmt.h" ]
  sources += [ "${example_platform_dir}/app/local_voice/DSMT/en/en_strings_dsmt.h" ]
  sources += [ "${example_platform_dir}/app/local_voice/DSMT/en/en_strings_to_actions_dsmt.h" ]
  sources += [ "${example_platform_dir}/app/local_voice/DSMT/en/en_strings_to_prompts_dsmt.h" ]
  sources += [ "${example_platform_dir}/app/local_voice/DSMT/en/en_voice_demos_dsmt.h" ]
  sources += [ "${example_platform_dir}/app/local_voice/VIT/voice_demos_vit.c" ]
  sources += [ "${example_platform_dir}/app/local_voice/VIT/demo_actions_vit.h" ]
  sources += [ "${example_platform_dir}/app/local_voice/DSMT/en/en_voice_model_binary_dsmt.s" ]

  # audio
  sources += [ "${example_platform_dir}/app/audio/pdm_to_pcm_task.c" ]
  sources += [ "${example_platform_dir}/app/audio/sln_amplifier_processing.c" ]
  sources += [ "${example_platform_dir}/app/audio/sln_amplifier.c" ]
  sources += [ "${example_platform_dir}/app/audio/sln_i2s_mic_processing.c" ]
  sources += [ "${example_platform_dir}/app/audio/sln_i2s_mic.c" ]
  sources += [ "${example_platform_dir}/app/audio/sln_pdm_mic.c" ]
  sources += [ "${example_platform_dir}/app/audio/audio_processing/audio_processing_task.c" ]
  sources += [ "${example_platform_dir}/app/audio/rdsp_utilities_public/rdsp_memory_utils_public/memcheck.c" ]
  sources += [ "${example_platform_dir}/app/audio/rdsp_utilities_public/rdsp_memory_utils_public/RdspMemoryUtilsPublic.c" ]
  sources += [ "${example_platform_dir}/app/audio/sln_afe/sln_afe.c" ]

  # audio_stremar
  sources += [ "${example_platform_dir}/app/audio_streamer/local_sounds_task.c" ]
  sources += [ "${example_platform_dir}/app/audio_streamer/sln_streamer.c" ]
  sources += [ "${example_platform_dir}/app/audio_streamer/streamer_pcm.c" ]

  # cjson
  sources += [ "${example_platform_dir}/app/cjson/src/cJSON.c" ]
  sources += [ "${example_platform_dir}/app/cjson/src/cJSON_Utils.c" ]

  # startup
  sources += [ "${example_platform_dir}/startup/startup_mimxrt106s.cpp"]

  # Source dir
  sources += [ "${example_platform_dir}/app/source/binding_table.c" ]
  sources += [ "${example_platform_dir}/app/source/sln_encrypt.c" ]
  sources += [ "${example_platform_dir}/app/source/sln_flash_config.c" ]
  sources += [ "${example_platform_dir}/app/source/sln_flash_littlefs.c" ]
  sources += [ "${example_platform_dir}/app/source/sln_flash.c" ]
  sources += [ "${example_platform_dir}/app/source/flash_ica_driver.c" ]
  sources += [ "${example_platform_dir}/app/source/sln_pwm_driver_flexio.c" ]
  sources += [ "${example_platform_dir}/app/source/sln_rgb_led_driver.c" ]
  sources += [ "${example_platform_dir}/app/source/sln_RT10xx_RGB_LED_driver_flexio.c" ]
  sources += [ "${example_platform_dir}/app/source/sln_shell.c" ]
  sources += [ "${example_platform_dir}/app/source/perf.c" ]
  sources += [ "${example_platform_dir}/app/source/sln_local_voice_dsmt.c" ]
  sources += [ "${example_platform_dir}/app/source/sln_local_voice_vit.c" ]
  sources += [ "${example_platform_dir}/app/source/sln_local_voice_s2i.c" ]
  sources += [ "${example_platform_dir}/app/source/app_layer.c" ]
  sources += [ "${example_platform_dir}/app/source/app_layer_nxp.c" ]
  sources += [ "${example_platform_dir}/app/source/app_layer_nxp_s2i.c" ]
  sources += [ "${example_platform_dir}/app/source/sln_app_fwupdate.c" ]
  sources += [ "${example_platform_dir}/app/source/os_hooks.c" ]
  sources += [ "${example_platform_dir}/app/source/iot_logging_task_dynamic_buffers.c" ]
  sources += [ "${example_platform_dir}/app/source/fsl_str.c" ]
  sources += [ "${example_platform_dir}/app/source/fault_handlers.c" ]
  sources += [ "${example_platform_dir}/app/source/sln_main.c" ]

  # Indicate the path to CHIPProjectConfig.h
  include_dirs += [ "include/config" ]

  # Indicate the default path to FreeRTOSConfig.h
  include_dirs += [ "${example_platform_dir}/app/project_include/freeRTOS" ]

  # Indicate the default path to OpenThreadConfig.h
  include_dirs += [ "${example_platform_dir}/app/project_include/openthread" ]

  # For matter with BR feature, increase FreeRTOS heap size
  if (chip_enable_wifi && chip_enable_openthread) {
    defines += [ "configTOTAL_HEAP_SIZE=(size_t)(160 * 1024)" ]
  }

  defines += [
    "CHIP_DEVICE_CONFIG_USE_TEST_SETUP_DISCRIMINATOR=${setup_discriminator}",
  ]
}

# Create the SDK driver instance.
# Particular sources/defines/includes could be added to add other drivers not available in the default sdk driver template
rt1060_sdk_drivers("sdk_driver") {
}

rt_executable("all_cluster_app") {
  output_name = "chip-rt1060-all-cluster-example"

  defines = [ "CONFIG_RENDEZVOUS_MODE=7",
              "CONFIG_APP_FREERTOS_OS=1", ]

  if(chip_enable_openthread){
    defines += [ "CONFIG_NET_L2_OPENTHREAD=1" ]
  }

  include_dirs = [
    "../../common/main/include",
    "../../common/main",
    "${chip_root}/examples/all-clusters-app/all-clusters-common/include",
    "${chip_root}/examples/providers/",
  ]

  sources = [
    "${chip_root}/examples/all-clusters-app/all-clusters-common/src/binding-handler.cpp",
    "${chip_root}/examples/providers/DeviceInfoProviderImpl.cpp",
    "../../common/main/AppTask.cpp",
    "../../common/main/DeviceCallbacks.cpp",
    "../../common/main/ZclCallbacks.cpp",
    "../../common/main/include/AppEvent.h",
    "../../common/main/include/AppTask.h",
    "../../common/main/include/DeviceCallbacks.h",
    "../../common/main/main.cpp",
    
  ]

  # App common files
  include_dirs += [
    "${common_example_dir}/icd/include",
    "${common_example_dir}/matter_cli/include",
    "${common_example_dir}/device_manager/include",
    "${common_example_dir}/device_callbacks/include",
    "${common_example_dir}/matter_button/include",
    "${common_example_dir}/factory_data/include",
    "${common_example_dir}/app_task/include",
  ]

  sources += [
    "${common_example_dir}/icd/source/ICDUtil.cpp",
    "${common_example_dir}/device_manager/source/CHIPDeviceManager.cpp",
    "${common_example_dir}/device_callbacks/source/CommonDeviceCallbacks.cpp",
    "${common_example_dir}/app_task/source/AppTaskBase.cpp",
    "${common_example_dir}/app_task/source/AppTaskFreeRTOS.cpp",
    "${common_example_dir}/matter_button/source/AppMatterButton.cpp",
    "${example_platform_dir}/factory_data/source/AppFactoryDataExample.cpp",
    
  ]

  deps = [ "${chip_root}/examples/${app_common_folder}" ]

  sources += [
    "${chip_root}/examples/${app_common_folder}/src/bridged-actions-stub.cpp",
    "${chip_root}/examples/${app_common_folder}/src/smco-stub.cpp",
    "${chip_root}/examples/${app_common_folder}/src/static-supported-modes-manager.cpp",
  ]

  if (chip_enable_matter_cli) {
    defines += [ "ENABLE_CHIP_SHELL" ]
    deps += [
      "${chip_root}/examples/shell/shell_common:shell_common",
      "${chip_root}/src/lib/shell:shell",
    ]
    sources += [
      "${common_example_dir}/matter_cli/source/AppCLIBase.cpp",
      "${common_example_dir}/matter_cli/source/AppCLIFreeRTOS.cpp",
    ]
  }

  if (chip_enable_ota_requestor) {
    sources += [
      "${common_example_dir}/ota_requestor/source/OTARequestorInitiator.cpp",
      "${common_example_dir}/ota_requestor/source/OTARequestorInitiatorCommon.cpp",
      "${chip_root}/examples/platform/nxp/common/mcuboot_app_support/flash_partitioning.h",

      #Adding mcuboot files
      "${chip_root}/examples/platform/nxp/common/mcuboot_app_support/mcuboot_app_support.c",
      "${chip_root}/examples/platform/nxp/common/mcuboot_app_support/mcuboot_app_support.h",
    ]
    include_dirs += [
      "$${common_example_dir}/ota_requestor/include",
      "${chip_root}/examples/platform/nxp/common/mcuboot_app_support",
    ]
  }

  if (wifi_connect) {
    defines += [
      "WIFI_CONNECT_TASK=1",
      "WIFI_CONNECT=1",
    ]

    if (!chip_enable_matter_cli) {
      assert(wifi_ssid != "" && wifi_password != "",
             "WiFi SSID and password must be specified at build time!")
    }

    if (wifi_ssid != "") {
      defines += [ "WIFI_SSID=\"${wifi_ssid}\"" ]
    }

    if (wifi_password != "") {
      defines += [ "WIFI_PASSWORD=\"${wifi_password}\"" ]
    }

    include_dirs += [ "${common_example_dir}/wifi_connect/include" ]
    sources += [ "${common_example_dir}/wifi_connect/source/WifiConnect.cpp" ]
  }

  if (tcp_download) {
    assert(wifi_ssid != "" && wifi_password != "",
           "WiFi SSID and password must be specified at build time!")

    defines += [ "CONFIG_CHIP_TCP_DOWNLOAD=1" ]
    defines += [
      "WIFI_CONNECT=1",
      "WIFI_SSID=\"${wifi_ssid}\"",
      "WIFI_PASSWORD=\"${wifi_password}\"",
    ]

    include_dirs += [ "${common_example_dir}/tcp_download_test/include"]
    sources += ["${common_example_dir}/tcp_download_test/source/TcpDownload.cpp"]
  }

  if (enable_ota_provider) {
    defines += [ "CONFIG_CHIP_OTA_PROVIDER=1" ]

    include_dirs += [
      "${common_example_dir}/ota_provider/include",
      "${common_example_dir}/ota_provider/ota-provider-common",
    ]

    sources += [
      "${common_example_dir}/ota_provider/ota-provider-common/RTBdxOtaSender.cpp",
      "${common_example_dir}/ota_provider/ota-provider-common/RTOTAProviderExample.cpp",
      "${common_example_dir}/ota_provider/source/OTAProvider.cpp",
    ]

    deps += [
      "${chip_root}/src/app/server",
      "${chip_root}/src/protocols/bdx",
      "${chip_root}/third_party/jsoncpp",
    ]
  }

  # In case a dedicated assert function needs to be supported the flag sdk_fsl_assert_support should be set to false
  # The would add to the build a dedicated application assert implementation.
  if (!sdk_fsl_assert_support) {
    sources += ["${common_example_dir}/app_assert/source/AppAssert.cpp"]
  }

  cflags = [ "-Wconversion" ]

  ldscript =
      "${example_platform_dir}/app/ldscripts/MIMXRT1062xxxxx_flexspi_nor.ld"

  inputs = [ ldscript ]

  ldflags = [
    "-T" + rebase_path(ldscript, root_build_dir),
    "-fno-common",
    "-Wl,--defsym=__stack_size__=2048",
    "-ffreestanding",
    "-fno-builtin",
    "-mapcs",
    "-u qspiflash_config",
    "-u image_vector_table",
    "-u boot_data",
    "-u dcd_data",
    "-Wl,-print-memory-usage",
    "-Wl,--no-warn-rwx-segments",
  ]

  if (enable_ota_provider) {
    # As the OTA file will be stored in the littlefs file system, it is required to increase the size of the file system
    # To be able to store an OTA file with a MAX size of 640K,
    # it recommended to size the file system with:
    # 161 sectors of 4K => reserved for the OTA file
    # 32 sectors of 4K => reserved for Matter/OT/BLE settings storage
    ldflags += [ "-Wl,--defsym=gNVMSectorCountLink_d=193" ]
  }

  if (chip_enable_ota_requestor) {
    # If OTA build flag is enabled,
    # we would need to reserve enough space for the bootloader (MCUBoot)
    # MCUBoot requires 0x11000 Bytes to be reserved at the base of the flash
    # Consequently, some sections will need to be shifted
    ldflags += [ "-Wl,--defsym=__mcu_boot_size__=0x11000" ]
  }

  output_dir = root_out_dir
}

group("rt1060") {
  deps = [ ":all_cluster_app" ]
}

group("default") {
  deps = [ ":rt1060" ]
}
