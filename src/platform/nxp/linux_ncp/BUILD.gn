# Copyright (c) 2021 Project CHIP Authors
# Copyright 2025 NXP
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("//build_overrides/build.gni")
import("//build_overrides/chip.gni")

import("${build_root}/config/linux/pkg_config.gni")

import("${chip_root}/src/lib/core/core.gni")
import("${chip_root}/src/platform/device.gni")
import("${chip_root}/src/inet/inet.gni")
import("${chip_root}/src/system/system.gni")

assert(chip_device_platform == "linux_ncp")

if (chip_use_pw_logging) {
  import("//build_overrides/pigweed.gni")
}

if (chip_enable_openthread) {
  import("//build_overrides/openthread.gni")
  import("//build_overrides/ot_br_posix.gni")
}

static_library("linux_ncp") {
  sources = [
    "../../DeviceSafeQueue.cpp",
    "../../DeviceSafeQueue.h",
    "../../GLibTypeDeleter.h",
    "../../SingletonConfigurationManager.cpp",
    "CHIPDevicePlatformConfig.h",
    "../../Linux/CHIPDevicePlatformEvent.h",
    "../../Linux/CHIPLinuxStorage.cpp",
    "../../Linux/CHIPLinuxStorage.h",
    "../../Linux/CHIPLinuxStorageIni.cpp",
    "../../Linux/CHIPLinuxStorageIni.h",
    "CHIPPlatformConfig.h",
    "ConfigurationManagerImpl.cpp",
    "ConfigurationManagerImpl.h",
    "ConnectivityManagerImpl.cpp",
    "ConnectivityManagerImpl.h",
    "ConnectivityUtils.cpp",
    "ConnectivityUtils.h",
    "DeviceInstanceInfoProviderImpl.cpp",
    "DeviceInstanceInfoProviderImpl.h",
    "DiagnosticDataProviderImpl.cpp",
    "DiagnosticDataProviderImpl.h",
    "InetPlatformConfig.h",
    "../../Linux/KeyValueStoreManagerImpl.cpp",
    "../../Linux/KeyValueStoreManagerImpl.h",
    "../../Linux/NetworkCommissioningDriver.h",
    "NetworkCommissioningEthernetDriver.cpp",
    "PlatformManagerImpl.cpp",
    "PlatformManagerImpl.h",
    "../../Linux/PosixConfig.cpp",
    "../../Linux/PosixConfig.h",
    "SystemPlatformConfig.h",
    "../../Linux/SystemTimeSupport.cpp",
  ]

  deps = [
    "${chip_root}/src/app/icd/server:icd-server-config",
    "${chip_root}/src/credentials:credentials_header",
    "${chip_root}/src/setup_payload",
    "${chip_root}/third_party/ncp_host:ncp_host_imx",
  ]

  if (!chip_use_external_logging) {
    sources += [ "../../Linux/Logging.cpp" ]
    deps += [ "${chip_root}/src/platform/logging:headers" ]
  }

  if (chip_enable_openthread) {
    sources += [ "NetworkCommissioningThreadDriver.cpp" ]
  }

  if (chip_enable_ble) {
    sources += [
      "BlePlatformConfig.h",
      "BLEAdvertisingArbiter.cpp",
      "BLEManagerImpl.cpp",
      "BLEManagerImpl.h",
      "BLEList.cpp",
    ]
  }

if(chip_enable_wifi)
{
  sources += [
    "inet/EndPointStateNcp.h",
    "inet/UDPEndPointImplNcp.cpp",
    "inet/TCPEndPointImplNcp.h",
    "inet/TCPEndPointImplNcp.cpp",
    "inet/SystemLayerImplSelectNcp.cpp",
    "inet/UDPEndPointImplNcp.h",
  ]
}
else
{
sources += [
    "inet/SystemLayerImplSelectNcp.cpp",
    "inet/EndPointStateNcp.h",
    "inet/ot/EndPointStateOpenThread.h",
    "inet/ot/UDPEndPointImplOpenThread.cpp",
    "inet/ot/UDPEndPointImplOpenThread.h",
    "inet/ot/TCPEndPointImplOpenThread.cpp",
    "inet/ot/TCPEndPointImplOpenThread.h",
  ]
}
  

  public_deps = [
    "${chip_root}/src/app/common:cluster-objects",
    "${chip_root}/src/platform:platform_base",
    "${chip_root}/third_party/inipp",
    "${chip_root}/third_party/ncp_host:ncp_host_imx",
  ]

  public_configs = []
  
 if (chip_mdns == "platform") {
    sources += [
      "../../OpenThread/OpenThreadDnssdImpl.cpp",
      "../../OpenThread/DnssdImpl.cpp",
      "../../OpenThread/OpenThreadDnssdImpl.h",
    ]

    deps += [ "${chip_root}/src/lib/dnssd:platform_header" ]

    #public_configs += [ ":avahi_client_config" ]
  }

  if (chip_enable_ota_requestor) {
    sources += [
      "../../Linux/OTAImageProcessorImpl.cpp",
      "../../Linux/OTAImageProcessorImpl.h",
    ]
  }

  if (chip_enable_openthread) {
    sources += [
      "ThreadStackManagerImpl.cpp",
      "ThreadStackManagerImpl.h",
      "../../OpenThread/OpenThreadUtils.cpp",
      "../../OpenThread/GenericNetworkCommissioningThreadDriver.cpp",
      "../../OpenThread/GenericNetworkCommissioningThreadDriver.h",
    ]

    public_deps += [ "dbus/openthread" ]
  }

  if (chip_use_pw_logging) {
    deps += [ "$dir_pw_log" ]
  }

  if (chip_enable_wifi) {
    sources += [ "../../Linux/NetworkCommissioningWiFiDriver.cpp" ]

    #public_deps += [ "dbus/wpa" ]
  }

}
