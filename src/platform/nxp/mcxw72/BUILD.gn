# Copyright (c) 2021 Project CHIP Authors
# Copyright 2023 NXP
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("//build_overrides/build.gni")
import("//build_overrides/chip.gni")
import("//build_overrides/nxp_sdk.gni")
import("//build_overrides/openthread.gni")
import("${chip_root}/src/platform/device.gni")

# If external SDK is used, do not import ${nxp_sdk_name}.gni
if (!nxp_external_sdk) {
  import("${nxp_sdk_build_root}/${nxp_sdk_name}/${nxp_sdk_name}.gni")
}

import("${nxp_sdk_build_root}/nxp_sdk.gni")

assert(chip_device_platform == "nxp")

source_set("nxp_factory_data") {
  sources = [
    "../common/factory_data/legacy/FactoryDataDriver.cpp",
    "../common/factory_data/legacy/FactoryDataDriverImpl.cpp",
    "../common/factory_data/legacy/FactoryDataProvider.cpp",
    "../common/factory_data/legacy/FactoryDataProviderImpl.cpp",
  ]

  public = [
    "${chip_root}/src/credentials/CHIPCert.h",
    "${chip_root}/src/credentials/CertificationDeclaration.h",
  ]

  defines = [ "PLATFORM_FACTORY_DATA_PROVIDER_IMPL_HEADER=\"platform/nxp/common/factory_data/legacy/FactoryDataProviderImpl.h\"" ]

  deps = [
    ":nxp_platform",
    "${chip_root}/src/credentials:credentials",
  ]
}

source_set("nxp_ota") {
  public = [ "../common/ota/OTAImageProcessorImpl.h" ]

  sources = [
    "../common/ota/OTAImageProcessorImpl.cpp",
    "../common/ota/OTAImageProcessorImpl.h",
    "../common/ota/OTATlvProcessor.cpp",
    "../common/ota/OTATlvProcessor.h",
    "../common/ota/OTAFirmwareProcessor.cpp",
    "../common/ota/OTAFirmwareProcessor.h",
    "../common/ota/OTAHooks.cpp",
  ]

  if (nxp_use_factory_data &&
      nxp_enable_ota_factory_data_processor) {
    sources += [
      "../common/ota/OTAFactoryDataProcessor.cpp",
      "../common/ota/OTAFactoryDataProcessor.h",
    ]
  }

  deps = [
    ":nxp_platform",
    "${chip_root}/src/platform:platform",
  ]
}

config("nxp_platform_config") {
  include_dirs = [
    ".",
    "../common",
    "../common/ble",
    "../common/crypto",
    "../common/factory_data/legacy",
    "../common/ota",
  ]

  defines = [ "EXTERNAL_BLEMANAGERIMPL_HEADER=\"platform/nxp/${nxp_platform}/BLEManagerImpl.h\"" ]
}

static_library("nxp_platform") {
  output_name = "libCHIP_NXP_Port_${nxp_platform}"
  cflags = [
    "-Wno-conversion",
    "-Wno-sign-compare",
  ]
  deps = []
  defines = [ "NXP_USE_MML=1" ]
  sources = [
    "../../FreeRTOS/SystemTimeSupport.cpp",
    "../../SingletonConfigurationManager.cpp",
    "../common/CHIPDevicePlatformEvent.h",
    "../common/ConfigurationManagerImpl.cpp",
    "../common/ConfigurationManagerImpl.h",
    "../common/ConnectivityManagerImpl.cpp",
    "../common/ConnectivityManagerImpl.h",
    "../common/DiagnosticDataProviderImpl.cpp",
    "../common/DiagnosticDataProviderImpl.h",
    "../common/KeyValueStoreManagerImpl.cpp",
    "../common/KeyValueStoreManagerImpl.h",
    "../common/NXPConfigNVS.cpp",
    "../common/NXPConfig.h",
    "../common/NetworkProvisioningServerImpl.h",
    "../common/PlatformManagerImpl.h",
    "../common/SoftwareUpdateManagerImpl.h",
    "CHIPDevicePlatformConfig.h",
    "PlatformManagerImpl.cpp",
  ]

  if (chip_crypto == "platform") {
    sources += [
      "../common/crypto/CHIPCryptoPalS200.cpp",
      "../common/crypto/PersistentStorageOpKeystoreS200.cpp",
      "../common/crypto/PersistentStorageOpKeystoreS200.h",
    ]
  }

  if (chip_enable_ble) {
    sources += [
      "../common/ble/BLEManagerCommon.cpp",
      "../common/ble/BLEManagerCommon.h",
      "../common/ble/BLEManagerImpl.cpp",
    ]
  }

  public_deps = [ "${chip_root}/src/platform:platform_base" ]

  deps += [ 
    "${chip_root}/src/platform/logging:headers",
    "${chip_root}/src/lib/dnssd:constants",
  ]

  if (chip_enable_openthread) {
    sources += [
      "../../OpenThread/OpenThreadUtils.cpp",
      "../common/ThreadStackManagerImpl.cpp",
      "../common/ThreadStackManagerImpl.h",
    ]

    deps += [ "${chip_root}/third_party/openthread:openthread" ]
    public_deps += [ "${chip_root}/third_party/openthread:openthread-platform" ]

    if (chip_mdns == "platform") {
        sources += [
          "../../OpenThread/DnssdImpl.cpp",
          "../../OpenThread/OpenThreadDnssdImpl.cpp",
          "../../OpenThread/OpenThreadDnssdImpl.h",
        ]
        deps += [ "${chip_root}/src/lib/dnssd:platform_header" ]
    }
  }

  deps += [ "${nxp_sdk_build_root}:nxp_sdk" ]

  public_deps += [
    "${chip_root}/examples/platform/nxp/common/app/support:freertos_memory_utils",
    "${chip_root}/src/crypto",
    "${chip_root}/src/platform:syscalls_stub",
  ]

  public_configs = [ ":nxp_platform_config" ]
}
