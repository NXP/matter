# Copyright (c) 2021 Project CHIP Authors
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("//build_overrides/chip.gni")
import("${chip_root}/src/platform/device.gni")
import("//build_overrides/openthread.gni")
import("//build_overrides/nxp_sdk.gni")
import("${nxp_sdk_build_root}/nxp_sdk.gni")
import("${nxp_sdk_build_root}/${nxp_sdk_name}/${nxp_sdk_name}.gni")

assert(chip_device_platform == "nxp")

config("nxp_platform_config") {
  defines = [ "EXTERNAL_BLEMANAGERIMPL_HEADER=\"platform/nxp/common/ble_zephyr/BLEManagerImpl.h\"" ]
  include_dirs = [ "." ,
                   "../../common" ]
  if (chip_with_factory_data == 1) {
    defines += ["CONFIG_CHIP_PLAT_LOAD_REAL_FACTORY_DATA=1"]
  }
}

static_library("nxp_platform") {
  deps = []
  defines = []
  sources = [
    "../../../FreeRTOS/SystemTimeSupport.cpp",
    "../../../SingletonConfigurationManager.cpp",
    "../../../Zephyr/BLEManagerImpl.cpp",
    "../../common/ble_zephyr/BLEManagerImpl.h",
    "CHIPDevicePlatformConfig.h",
    "../../common/CHIPDevicePlatformEvent.h",
    "../../common/ConfigurationManagerImpl.cpp",
    "../../common/ConfigurationManagerImpl.h",
    "../../common/ConnectivityManagerImpl.cpp",
    "../../common/ConnectivityManagerImpl.h",
    "../../common/DiagnosticDataProviderImpl.cpp",
    "../../common/DiagnosticDataProviderImpl.h",
    "../../common/KeyValueStoreManagerImpl.cpp",
    "../../common/KeyValueStoreManagerImpl.h",
    "../../common/NXPConfig.cpp",
    "../../common/NXPConfig.h",
    "../../common/Logging.cpp",
    "../../common/NetworkProvisioningServerImpl.h",
    "PlatformManagerImpl.cpp",
    "../../common/PlatformManagerImpl.h",
    "../../common/SoftwareUpdateManagerImpl.h",
    "../../common/ram_storage.c",
    "../../common/ram_storage.h",
  ]

  public_deps = [ "${chip_root}/src/platform:platform_base" ]

  # define CHIP_PLAT_NVM_SUPPORT - See NXPConfig.cpp for definition
  if (rt_nvm_component == "nvm_fwk")
  {
    defines += ["CHIP_PLAT_NVM_SUPPORT=1"]
  }
  else if (rt_nvm_component == "littlefs")
  {
    defines += ["CHIP_PLAT_NVM_SUPPORT=2"]
  }

  if (chip_enable_wifi) {
    sources += [
      "../../common/NetworkCommissioningWiFiDriver.cpp",
      "../../common/NetworkCommissioningDriver.h",
    ]
  }
  if (chip_enable_ota_requestor) {
    sources += [
      "../../common/OTAImageProcessorImpl.cpp",
      "../../common/OTAImageProcessorImpl.h",
    ]
    include_dirs = [ "${chip_root}/examples/platform/nxp/common/mcuboot_app_support/" ]
  }

  if (chip_enable_openthread) {
    sources += [
      "../../../OpenThread/OpenThreadUtils.cpp",
      "../../common/ThreadStackManagerImpl.cpp",
      "../../common/ThreadStackManagerImpl.h",
    ]

    if (chip_mdns == "platform") {
      sources += [ "../../../OpenThread/DnssdImpl.cpp" ]
      deps += [ "${chip_root}/src/lib/dnssd:platform_header" ]
    }

  }

  if (chip_with_factory_data == 1) {
    sources += ["FactoryDataProvider.h", "FactoryDataProvider.cpp",
                "DataReaderEncryptedDCP.h", "DataReaderEncryptedDCP.cpp"]
  }

  deps += [ "${nxp_sdk_build_root}:nxp_sdk" ]

  public_deps += [ "${chip_root}/src/crypto" ]
  public_configs = [ 
    ":nxp_platform_config",
    # address_resolve config needed by the include of server.h in ConfigurationManagerImpl.cpp
    "${chip_root}/src/lib/address_resolve:default_address_resolve_config" ]
}
