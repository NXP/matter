# Copyright (c) 2023 Project CHIP Authors
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("//build_overrides/chip.gni")

config("libele_config") {
  ELE_ROM = 1
  ELE_FMW = 2

  ELE_MAJOR_VER = 1
  ELE_MINOR_VER = 0

  defines = [
    "LIB_MAJOR_VERSION=${ELE_MAJOR_VER}",
    "LIB_MINOR_VERSION=${ELE_MINOR_VER}",

    "CONFIG_PLAT_ELE=1",
    "PLAT_ELE_FEAT_NOT_SUPPORTED=0",
    "PSA_COMPLIANT=1",
    "SECONDARY_API_SUPPORTED=1",

    "MT_SAB_SIGN_GEN=${ELE_FMW}",
    "MT_SAB_VERIFY_SIGN=${ELE_FMW}",
    "MT_SAB_KEY_GENERATE=${ELE_FMW}",
    "MT_SAB_MANAGE_KEY_GROUP=${ELE_FMW}",
    "MT_SAB_IMPORT_KEY=${ELE_FMW}",
    "MT_SAB_DELETE_KEY=${ELE_FMW}",
    "MT_SAB_GET_KEY_ATTR=${ELE_FMW}",
    "MT_SAB_HASH_GEN=${ELE_FMW}",
    "MT_SAB_CIPHER=${ELE_FMW}",
    "MT_SAB_SESSION=${ELE_FMW}",
    "MT_SAB_KEY_STORE=${ELE_FMW}",
    "MT_SAB_KEY_STORE_REPROV_EN=${ELE_FMW}",
    "MT_SAB_KEY_MANAGEMENT=${ELE_FMW}",
    "MT_SAB_MAC=${ELE_FMW}",
    "MT_SAB_RNG=${ELE_FMW}",
    "MT_SAB_KEY_RECOVERY=${ELE_FMW}",
    "MT_SAB_GET_INFO=${ELE_FMW}",
    "MT_SAB_AUTH_ENC=${ELE_FMW}",
    "MT_SAB_AUTH_ENC_NEW=${ELE_FMW}",
    "MT_SAB_DATA_STORAGE=${ELE_FMW}",
    "MT_SAB_DATA_STORAGE_DELETE=${ELE_FMW}",
    "MT_SAB_DEBUG_DUMP=${ELE_ROM}",
    "MT_SAB_DEV_ATTEST=${ELE_ROM}",
    "MT_SAB_DEV_GETINFO=${ELE_ROM}",
    "MT_SAB_LC_UPDATE=${ELE_ROM}",
    "MT_SAB_STORAGE_MASTER_IMPORT=${ELE_FMW}",
    "MT_SAB_STORAGE_MASTER_EXPORT_REQ=${ELE_FMW}",
    "MT_SAB_STORAGE_EXPORT_FINISH_REQ=${ELE_FMW}",
    "MT_SAB_STORAGE_CHUNK_GET_REQ=${ELE_FMW}",
    "MT_SAB_STORAGE_CHUNK_GET_DONE_REQ=${ELE_FMW}",
    "MT_SAB_STORAGE_CHUNK_EXPORT_REQ=${ELE_FMW}",
    "MT_SAB_STORAGE_OPEN=${ELE_FMW}",
    "MT_SAB_STORAGE_CLOSE=${ELE_FMW}",
    "MT_SAB_STORAGE_KEY_DB_REQ=${ELE_FMW}",
    "MT_SAB_ENC_DATA_STORAGE=${ELE_FMW}",

    "HSM_SIGN_GEN=1",
    "HSM_VERIFY_SIGN=1",
    "HSM_KEY_GENERATE=1",
    "HSM_MANAGE_KEY_GROUP=1",
    "HSM_IMPORT_KEY=1",
    "HSM_DELETE_KEY=1",
    "HSM_GET_KEY_ATTR=1",
    "HSM_HASH_GEN=1",
    "HSM_CIPHER=1",
    "HSM_SESSION=1",
    "HSM_KEY_STORE=1",
    "HSM_KEY_MANAGEMENT=1",
    "HSM_MAC=1",
    "HSM_RNG=1",
    "HSM_KEY_RECOVERY=1",
    "HSM_GET_INFO=1",
    "HSM_AUTH_ENC=1",
    "HSM_DATA_STORAGE=1",
    "HSM_DEBUG_DUMP=1",
    "HSM_DEV_ATTEST=1",
    "HSM_DEV_GETINFO=1",
    "HSM_LC_UPDATE=1",
    "HSM_ENC_DATA_STORAGE=1",
  ]

  include_dirs = [
    "repo/src/plat/ele/include",
    "repo/src/common/include",
    "repo/src/common/sab_msg/include",
    "repo/include",
    "repo/include/common",
    "repo/include/hsm",
    "repo/include/she",
  ]
}

source_set("libelematter") {
  ELE_PLAT_PATH = "src/plat/ele"
  ELE_PLAT_COMMON_PATH = "src/common"

  sources = [
    "repo/${ELE_PLAT_COMMON_PATH}/hsm_lib.c",
    "repo/${ELE_PLAT_PATH}/plat_err.c",
    "repo/${ELE_PLAT_PATH}/ele_utils.c",

    "repo/${ELE_PLAT_COMMON_PATH}/sab_msg/sab_process_msg.c",
    "repo/${ELE_PLAT_COMMON_PATH}/sab_msg/sab_init_proc_msg.c",
    "repo/${ELE_PLAT_COMMON_PATH}/sab_msg/sab_sign_gen.c",
    "repo/${ELE_PLAT_COMMON_PATH}/sab_msg/sab_verify_sign.c",
    "repo/${ELE_PLAT_COMMON_PATH}/sab_msg/sab_key_generate.c",
    "repo/${ELE_PLAT_COMMON_PATH}/sab_msg/sab_manage_key_group.c",
    "repo/${ELE_PLAT_COMMON_PATH}/sab_msg/sab_import_key.c",
    "repo/${ELE_PLAT_COMMON_PATH}/sab_msg/sab_delete_key.c",
    "repo/${ELE_PLAT_COMMON_PATH}/sab_msg/sab_get_key_attr.c",
    "repo/${ELE_PLAT_COMMON_PATH}/sab_msg/sab_hash.c",
    "repo/${ELE_PLAT_COMMON_PATH}/sab_msg/sab_cipher.c",
    "repo/${ELE_PLAT_COMMON_PATH}/sab_msg/sab_session.c",
    "repo/${ELE_PLAT_COMMON_PATH}/sab_msg/sab_key_store.c",
    "repo/${ELE_PLAT_COMMON_PATH}/sab_msg/sab_key_management.c",
    "repo/${ELE_PLAT_COMMON_PATH}/sab_msg/sab_mac.c",
    "repo/${ELE_PLAT_COMMON_PATH}/sab_msg/sab_rng.c",
    "repo/${ELE_PLAT_COMMON_PATH}/sab_msg/sab_key_recovery.c",
    "repo/${ELE_PLAT_COMMON_PATH}/sab_msg/sab_get_info.c",
    "repo/${ELE_PLAT_COMMON_PATH}/sab_msg/sab_auth_enc.c",
    "repo/${ELE_PLAT_COMMON_PATH}/sab_msg/sab_data_storage.c",
    "repo/${ELE_PLAT_COMMON_PATH}/sab_msg/sab_debug_dump.c",
    "repo/${ELE_PLAT_COMMON_PATH}/sab_msg/sab_dev_attest.c",
    "repo/${ELE_PLAT_COMMON_PATH}/sab_msg/sab_dev_getinfo.c",
    "repo/${ELE_PLAT_COMMON_PATH}/sab_msg/sab_lc_update.c",
    "repo/${ELE_PLAT_COMMON_PATH}/sab_msg/sab_storage_master_import.c",
    "repo/${ELE_PLAT_COMMON_PATH}/sab_msg/sab_storage_master_export.c",
    "repo/${ELE_PLAT_COMMON_PATH}/sab_msg/sab_storage_export_finish.c",
    "repo/${ELE_PLAT_COMMON_PATH}/sab_msg/sab_storage_get_chunk.c",
    "repo/${ELE_PLAT_COMMON_PATH}/sab_msg/sab_storage_get_chunk_done.c",
    "repo/${ELE_PLAT_COMMON_PATH}/sab_msg/sab_storage_chunk_export.c",
    "repo/${ELE_PLAT_COMMON_PATH}/sab_msg/sab_storage_open.c",
    "repo/${ELE_PLAT_COMMON_PATH}/sab_msg/sab_storage_close.c",
    "repo/${ELE_PLAT_COMMON_PATH}/sab_msg/sab_storage_key_db.c",

    "repo/${ELE_PLAT_COMMON_PATH}/hsm_api/hsm_handle.c",
    "repo/${ELE_PLAT_COMMON_PATH}/hsm_api/hsm_utils.c",
    "repo/${ELE_PLAT_COMMON_PATH}/hsm_api/hsm_sign_gen.c",
    "repo/${ELE_PLAT_COMMON_PATH}/hsm_api/hsm_verify_sign.c",
    "repo/${ELE_PLAT_COMMON_PATH}/hsm_api/hsm_key_generate.c",
    "repo/${ELE_PLAT_COMMON_PATH}/hsm_api/hsm_manage_key_group.c",
    "repo/${ELE_PLAT_COMMON_PATH}/hsm_api/hsm_importkey.c",
    "repo/${ELE_PLAT_COMMON_PATH}/hsm_api/hsm_delete_key.c",
    "repo/${ELE_PLAT_COMMON_PATH}/hsm_api/hsm_get_key_attr.c",
    "repo/${ELE_PLAT_COMMON_PATH}/hsm_api/hsm_hash.c",
    "repo/${ELE_PLAT_COMMON_PATH}/hsm_api/hsm_cipher.c",
    "repo/${ELE_PLAT_COMMON_PATH}/hsm_api/hsm_session.c",
    "repo/${ELE_PLAT_COMMON_PATH}/hsm_api/hsm_key_store.c",
    "repo/${ELE_PLAT_COMMON_PATH}/hsm_api/hsm_key_management.c",
    "repo/${ELE_PLAT_COMMON_PATH}/hsm_api/hsm_mac.c",
    "repo/${ELE_PLAT_COMMON_PATH}/hsm_api/hsm_rng.c",
    "repo/${ELE_PLAT_COMMON_PATH}/hsm_api/hsm_key_recovery.c",
    "repo/${ELE_PLAT_COMMON_PATH}/hsm_api/hsm_get_info.c",
    "repo/${ELE_PLAT_COMMON_PATH}/hsm_api/hsm_auth_enc.c",
    "repo/${ELE_PLAT_COMMON_PATH}/hsm_api/hsm_data_storage.c",
    "repo/${ELE_PLAT_COMMON_PATH}/hsm_api/hsm_debug_dump.c",
    "repo/${ELE_PLAT_COMMON_PATH}/hsm_api/hsm_dev_attest.c",
    "repo/${ELE_PLAT_COMMON_PATH}/hsm_api/hsm_dev_getinfo.c",
    "repo/${ELE_PLAT_COMMON_PATH}/hsm_api/hsm_lc_update.c",

    "repo/${ELE_PLAT_COMMON_PATH}/sab_messaging.c",
    "repo/${ELE_PLAT_COMMON_PATH}/sab_common_err.c",
    "repo/${ELE_PLAT_COMMON_PATH}/se_global_info.c",
    "repo/${ELE_PLAT_PATH}/ele_os_abs_linux.c",
  ]

  public_configs = [ ":libele_config" ]
}
