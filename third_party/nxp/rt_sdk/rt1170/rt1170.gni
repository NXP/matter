# Copyright (c) 2022 Project CHIP Authors
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("//build_overrides/nxp_sdk.gni")
import("${nxp_sdk_build_root}/nxp_sdk.gni")
import("${nxp_sdk_build_root}/${nxp_sdk_name}/rt_sdk.gni")

declare_args() {
    evkname = "evkmimxrt1170"
    deviceBoardName = "MIMXRT1176"
}

if (is_sdk_package) {
  COMPONENT_FILES_PATH = "${rt_sdk_root}/components"
  DRIVER_FILES_PATH = "${rt_sdk_root}/devices/${deviceBoardName}/drivers"
  DRIVER_LPUART_FILES_PATH = "${DRIVER_FILES_PATH}"
  DRIVER_LPSPI_FILES_PATH = "${DRIVER_FILES_PATH}"
  DRIVER_EDMA_FILES_PATH = "${DRIVER_FILES_PATH}"
  DRIVER_DMAMUX_FILES_PATH = "${DRIVER_FILES_PATH}"
  DRIVER_PIT_FILES_PATH = "${DRIVER_FILES_PATH}"
  DRIVER_GPT_FILES_PATH = "${DRIVER_FILES_PATH}"
  DRIVER_FLEXSPI_FILES_PATH = "${DRIVER_FILES_PATH}"
  DRIVER_IGPIO_FILES_PATH = "${DRIVER_FILES_PATH}"
  DRIVER_ENET_FILES_PATH = "${DRIVER_FILES_PATH}"
  DRIVER_CACHE_FILES_PATH = "${DRIVER_FILES_PATH}/cm7"
  DRIVER_CAAM_FILES_PATH = "${rt_sdk_root}/devices/${deviceBoardName}/drivers"
  DRIVER_COMMON_FILES_PATH = "${DRIVER_FILES_PATH}"
  DRIVER_DEVICE_FILES_PATH = "${DRIVER_FILES_PATH}"
  DRIVER_USDHC_FILES_PATH = "${DRIVER_FILES_PATH}"
  COMPONENT_CRC_FILES_PATH = "${COMPONENT_FILES_PATH}/crc"
  COMPONENT_UART_FILES_PATH = "${COMPONENT_FILES_PATH}/uart"
  COMPONENT_TIMER_FILES_PATH = "${COMPONENT_FILES_PATH}/timer"
  COMPONENT_GPIO_FILES_PATH = "${COMPONENT_FILES_PATH}/gpio"
  COMPONENT_MEM_MANAGER_FILES_PATH = "${COMPONENT_FILES_PATH}/mem_manager"
  UTILITIES_FILES_PATH = "${rt_sdk_root}/devices/${deviceBoardName}/utilities"
  UTILITIES_SHELL_FILES_PATH = "${rt_sdk_root}/devices/${deviceBoardName}/utilities"
  UTILITIES_ASSERT_FILES_PATH = "${rt_sdk_root}/devices/${deviceBoardName}/utilities"
  DEBUG_CONSOLE_FILES_PATH = "${UTILITIES_FILES_PATH}/debug_console_lite"
  STR_FILES_PATH = "${UTILITIES_FILES_PATH}/str"
  FSL_FLEXSPI_NOR_BOOT_FILES_PATH = "${rt_sdk_root}/devices/${deviceBoardName}/xip"
}
else {
  COMPONENT_FILES_PATH = "${rt_sdk_root}/components"
  DRIVER_FILES_PATH = "${rt_sdk_root}/devices/${deviceBoardName}/drivers"
  DRIVER_LPUART_FILES_PATH = "${rt_sdk_root}/platform/drivers/lpuart"
  DRIVER_LPSPI_FILES_PATH = "${rt_sdk_root}/platform/drivers/lpspi"
  DRIVER_EDMA_FILES_PATH = "${rt_sdk_root}/platform/drivers/edma"
  DRIVER_DMAMUX_FILES_PATH = "${rt_sdk_root}/platform/drivers/dmamux"
  DRIVER_PIT_FILES_PATH = "${rt_sdk_root}/platform/drivers/pit"
  DRIVER_GPT_FILES_PATH = "${rt_sdk_root}/platform/drivers/gpt"
  DRIVER_FLEXSPI_FILES_PATH = "${rt_sdk_root}/platform/drivers/flexspi"
  DRIVER_IGPIO_FILES_PATH = "${rt_sdk_root}/platform/drivers/igpio"
  DRIVER_ENET_FILES_PATH = "${rt_sdk_root}/platform/drivers/enet"
  DRIVER_CACHE_FILES_PATH = "${rt_sdk_root}/platform/drivers/cache/armv7-m7"
  DRIVER_CAAM_FILES_PATH = "${rt_sdk_root}/platform/drivers/caam"
  DRIVER_COMMON_FILES_PATH = "${rt_sdk_root}/platform/drivers/common"
  DRIVER_DEVICE_FILES_PATH = "${DRIVER_FILES_PATH}"
  DRIVER_USDHC_FILES_PATH = "${rt_sdk_root}/platform/drivers/usdhc"
  COMPONENT_CRC_FILES_PATH = "${COMPONENT_FILES_PATH}/crc"
  COMPONENT_UART_FILES_PATH = "${COMPONENT_FILES_PATH}/uart"
  COMPONENT_TIMER_FILES_PATH = "${COMPONENT_FILES_PATH}/timer"
  COMPONENT_GPIO_FILES_PATH = "${COMPONENT_FILES_PATH}/gpio"
  COMPONENT_MEM_MANAGER_FILES_PATH = "${COMPONENT_FILES_PATH}/mem_manager"
  UTILITIES_FILES_PATH = "${rt_sdk_root}/platform/utilities"
  UTILITIES_SHELL_FILES_PATH = "${rt_sdk_root}/platform/utilities/shell"
  UTILITIES_ASSERT_FILES_PATH = "${rt_sdk_root}/platform/utilities/assert"
  DEBUG_CONSOLE_FILES_PATH = "${UTILITIES_FILES_PATH}/debug_console_lite"
  STR_FILES_PATH = "${UTILITIES_FILES_PATH}/str"
  FSL_FLEXSPI_NOR_BOOT_FILES_PATH = "${rt_sdk_root}/devices/${deviceBoardName}/xip"
}
template("rt1170_sdk_drivers") {
  config("${target_name}_config") {
    include_dirs = []
    
    if (defined(invoker.include_dirs)) {
      include_dirs += invoker.include_dirs
    }

    _rt1170_sdk_drivers_include_dirs = [
        #Drivers files
        "${rt_sdk_root}/devices/${deviceBoardName}/drivers",
        "${rt_sdk_root}/devices/${deviceBoardName}",
        "${COMPONENT_UART_FILES_PATH}",
        "${COMPONENT_TIMER_FILES_PATH}",
        "${COMPONENT_GPIO_FILES_PATH}",
        "${COMPONENT_MEM_MANAGER_FILES_PATH}",
        "${DRIVER_COMMON_FILES_PATH}",
        "${DRIVER_LPUART_FILES_PATH}",
        "${DRIVER_LPSPI_FILES_PATH}",
        "${DRIVER_EDMA_FILES_PATH}",
        "${DRIVER_DMAMUX_FILES_PATH}",
        "${DRIVER_IGPIO_FILES_PATH}",
        "${DRIVER_ENET_FILES_PATH}",
        "${DRIVER_CACHE_FILES_PATH}",
        "${DRIVER_CAAM_FILES_PATH}",
        "${DRIVER_PIT_FILES_PATH}",
        "${DRIVER_GPT_FILES_PATH}",
        "${DRIVER_FLEXSPI_FILES_PATH}",
        "${DRIVER_USDHC_FILES_PATH}",
        "${UTILITIES_SHELL_FILES_PATH}",
        "${UTILITIES_ASSERT_FILES_PATH}",
        "${DEBUG_CONSOLE_FILES_PATH}",
        "${STR_FILES_PATH}",
        # XIP
        "${rt_sdk_root}/boards/${evkname}/xip",
        "${rt_sdk_root}/components/flash/mflash",
        "${rt_sdk_root}/components/flash/mflash/mimxrt1170",
        "${rt_sdk_root}/core/components/internal_flash",
        # freertos
        "${rt_sdk_freertos_kernel}/portable/GCC/ARM_CM4F",
        # Framework
        "${rt_sdk_root}/middleware/wireless/framework/boards/${rt_fwk_platform}",
    ]

    libs = []

    if (defined(invoker.defines)) {
      defines += invoker.defines
    }
    else {
        defines = []
    }

    defines += [
        "CPU_${deviceBoardName}DVMAA",
        "CPU_${deviceBoardName}DVMAA_cm7",
        #"BOARD_${evkname}", #Used only in /examples/platform/nxp/rt/rt1170/app/transceiver/sdmmc_config.c
        #Framework defines to support hdlc over UART and a reset pin
        "SPINEL_UART_INSTANCE=7",
        "SPINEL_ENABLE_RX_RTS=1",
        "SPINEL_ENABLE_TX_RTS=1",
        #Framework flags for the reset pin
        "RESET_PIN_PORT=3",
        "RESET_PIN_NUM=9",
        #Crypto flags
        "CRYPTO_USE_DRIVER_CAAM",
        "CACHE_MODE_WRITE_THROUGH=1",
    ]

    if (chip_enable_ble) {
      libs += [
        #ethermind bt libs
        "${rt_sdk_root}/middleware/wireless/ethermind/bluetooth/private/lib/mcux/default/btdm/cm7f/gcc/libethermind_bt_core.a",
        "${rt_sdk_root}/middleware/wireless/ethermind/bluetooth/private/lib/mcux/default/btdm/cm7f/gcc/libethermind_bt_gatt.a",
        "${rt_sdk_root}/middleware/wireless/ethermind/bluetooth/private/lib/mcux/default/btdm/cm7f/gcc/libethermind_bt_protocol.a",
        "${rt_sdk_root}/middleware/wireless/ethermind/bluetooth/private/lib/mcux/default/btdm/cm7f/gcc/libethermind_bt_util.a",
      ]
      defines += [ 
        # This flag must be defined here in order for the controller to only be initialized once for all (ble, ot, wifi)  
        "CONTROLLER_INIT_ESCAPE=1",
      ]
    }

    if (chip_enable_matter_cli)
    {
      #When the CLI is enabled the debug console should be moved in UART2 for RT1170
      defines += [ "DEBUG_CONSOLE_UART_INDEX=2" ]
    }

    cflags = []

    if (defined(invoker.cflags)) {
      cflags += invoker.cflags
    }

    # Now add our "system-header" include dirs
    foreach(include_dir, _rt1170_sdk_drivers_include_dirs) {
      cflags += [ "-isystem" + rebase_path(include_dir, root_build_dir) ]
    }

  }

  source_set(target_name) {
    forward_variables_from(invoker, "*")

    if (!defined(sources)) {
      sources = []
    }




    sources += [
        "${DRIVER_LPUART_FILES_PATH}/fsl_lpuart.c",
        "${DRIVER_LPSPI_FILES_PATH}/fsl_lpspi.c",
        "${DRIVER_LPUART_FILES_PATH}/fsl_lpuart_edma.c",
        "${DRIVER_EDMA_FILES_PATH}/fsl_edma.c",
        "${DRIVER_DMAMUX_FILES_PATH}/fsl_dmamux.c",
        "${DRIVER_PIT_FILES_PATH}/fsl_pit.c",
        "${DRIVER_GPT_FILES_PATH}/fsl_gpt.c",
        "${DRIVER_FLEXSPI_FILES_PATH}/fsl_flexspi.c",
        "${DRIVER_IGPIO_FILES_PATH}/fsl_gpio.c",
        #"${DRIVER_ENET_FILES_PATH}/fsl_enet.c",
        "${DRIVER_CACHE_FILES_PATH}/fsl_cache.c",
        "${DRIVER_CAAM_FILES_PATH}/fsl_caam.c",
        "${DRIVER_COMMON_FILES_PATH}/fsl_common_arm.c",
        "${DRIVER_DEVICE_FILES_PATH}/fsl_clock.c",
        "${DRIVER_DEVICE_FILES_PATH}/fsl_pmu.c",
        "${DRIVER_DEVICE_FILES_PATH}/fsl_anatop_ai.c",
        "${DRIVER_DEVICE_FILES_PATH}/fsl_dcdc.c",
        "${COMPONENT_CRC_FILES_PATH}/fsl_adapter_software_crc.c",
        "${COMPONENT_UART_FILES_PATH}/fsl_adapter_lpuart.c",
        "${COMPONENT_FILES_PATH}/spi/fsl_adapter_lpspi.c",
        "${COMPONENT_TIMER_FILES_PATH}/fsl_adapter_pit.c",
        "${COMPONENT_GPIO_FILES_PATH}/fsl_adapter_igpio.c",
        "${COMPONENT_MEM_MANAGER_FILES_PATH}/fsl_component_mem_manager.c",
        "${UTILITIES_SHELL_FILES_PATH}/fsl_shell.c",
        "${DEBUG_CONSOLE_FILES_PATH}/fsl_debug_console.c",
        # comment fsl_str.c if using debug console light
        #"${STR_FILES_PATH}/fsl_str.c",
        # XIP
        "${FSL_FLEXSPI_NOR_BOOT_FILES_PATH}/fsl_flexspi_nor_boot.c",
        "${rt_sdk_root}/boards/${evkname}/xip/${evkname}_flexspi_nor_config.c",
        "${rt_core_sdk_root}/components/internal_flash/fsl_adapter_flexspi_nor_flash.c",
        #startup files
        "${rt_sdk_root}/devices/${deviceBoardName}/gcc/startup_${deviceBoardName}_cm7.S",
        "${rt_sdk_root}/devices/${deviceBoardName}/system_${deviceBoardName}_cm7.c",
        "${DRIVER_USDHC_FILES_PATH}/fsl_usdhc.c",
        "${rt_sdk_root}/components/flash/mflash/mimxrt1170/mflash_drv.c",
        # freertos files
        # freertos
        "${rt_sdk_freertos_kernel}/portable/GCC/ARM_CM4F/port.c",
        "${rt_sdk_freertos_kernel}/portable/MemMang/heap_4.c",
        # framework files
        # TODO: init buttons to be implemented in framework 
        #"${rt_sdk_root}/middleware/wireless/framework/boards/${rt_fwk_platform}/board_comp.c",
    ]

    if (sdk_fsl_assert_support) {
      sources += [
        "${UTILITIES_ASSERT_FILES_PATH}/fsl_assert.c",
      ]
    }

    if (chip_enable_ble) {
      sources += [
        "${rt_sdk_root}/middleware/wireless/ethermind/port/pal/mcux/bluetooth/hci_uart.c",
        "${rt_sdk_root}/middleware/wireless/ethermind/port/pal/mcux/bluetooth/controller/controller_wifi_nxp.c",
      ]
    }

    if (chip_enable_wifi) {
      sources += [ 
        "${rt_sdk_root}/middleware/wifi_nxp/wifidriver/wifi-sdio.c",
        "${rt_sdk_root}/middleware/wifi_nxp/wifidriver/mlan_action.c",
        "${rt_sdk_root}/middleware/wifi_nxp/wifidriver/mlan_mbo.c",
        "${rt_sdk_root}/middleware/wifi_nxp/wifidriver/mlan_11ax.c",
        "${rt_sdk_root}/middleware/wifi_nxp/wifidriver/mlan_11k.c",
        "${rt_sdk_root}/middleware/wifi_nxp/wifidriver/mlan_11v.c",
      ]
    }

    if (!defined(public_configs)) {
      public_configs = []
    }

    public_configs += [ ":${target_name}_config" ]
  }
}
