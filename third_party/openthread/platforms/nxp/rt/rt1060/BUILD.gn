# Copyright (c) 2020-2022 Project CHIP Authors
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("//build_overrides/chip.gni")
import("//build_overrides/nxp_sdk.gni")
import("${nxp_sdk_build_root}/nxp_sdk.gni")
import("${nxp_sdk_build_root}/${nxp_sdk_name}/${nxp_sdk_name}.gni")
import("//build_overrides/openthread.gni")
import("//build_overrides/mbedtls.gni")

openthread_nxp_root = "${chip_root}/third_party/openthread/ot-nxp"

config("openthread_rt1060_config") {
  include_dirs = [
      "${openthread_nxp_root}/src/common",
      "${openthread_nxp_root}/src/common/spinel",
      "${openthread_nxp_root}/src/imx_rt/rt1060",
      "${openthread_nxp_root}/third_party/mbedtls/configs",
      "${openthread_root}/third_party/mbedtls",
      "${openthread_root}/examples/platforms",
  ]
}

#Config used by the openthread stack to get the path to OpenthreadConfig.h
source_set("openthread_core_config_rt1060") {
  public_configs = [
# TODO : modify back to "${chip_root}/examples/platform/nxp/${nxp_platform}:chip_app_project_config"
# when architecture reworked for examples/platform/nxp
      "${chip_root}/examples/platform/nxp/${nxp_platform}:chip_app_project_config",
      ":openthread_rt1060_config"
  ]
}

source_set("libopenthread-rt1060") {
  sources = [
    "${openthread_nxp_root}/src/common/alarm_freertos.c",
    "${openthread_nxp_root}/src/common/diag.c",
    "${openthread_nxp_root}/src/common/entropy.c",
    "${openthread_nxp_root}/src/common/logging.c",
    "${openthread_nxp_root}/src/common/uart.c",
    "${openthread_nxp_root}/src/common/spinel/misc.c",
    "${openthread_nxp_root}/src/common/spinel/radio.cpp",
    "${openthread_nxp_root}/src/common/spinel/spinel_hdlc.cpp",
    "${openthread_nxp_root}/src/common/spinel/system.c",
    "${openthread_root}/src/lib/hdlc/hdlc.cpp",
  ]

  if (rt_nvm_component == "nvm_fwk")
  {
    sources += ["${openthread_nxp_root}/src/common/flash_nvm.c"]
  }
  else
  {
    sources += ["${openthread_nxp_root}/src/common/flash_littlefs.c"]
  }

  defines = [
    "OPENTHREAD_FTD",
  ]

  if (hci_spinel_single_uart) {
    defines += [ "OT_PLAT_SPINEL_HCI_OVER_HDLC" ]
    sources += ["${openthread_nxp_root}/src/common/spinel/spinel_hci_hdlc.cpp"]
  }
  else {
    defines += [ "OT_PLAT_SPINEL_OVER_HDLC" ]
  }

  public_configs = [
    ":openthread_rt1060_config"
  ]

  deps = [
    "${openthread_root}/src/core:libopenthread_core_headers",
    "../../..:libopenthread-platform",
    "${nxp_sdk_build_root}:nxp_sdk",
    "${nxp_sdk_build_root}:nxp_mbedtls",
    "${openthread_root}:libopenthread-spinel-rcp",
    "../../..:libopenthread-platform-utils",
  ]
}
