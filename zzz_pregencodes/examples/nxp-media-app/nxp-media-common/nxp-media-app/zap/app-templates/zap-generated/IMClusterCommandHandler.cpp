/*
 *
 *    Copyright (c) 2022 Project CHIP Authors
 *
 *    Licensed under the Apache License, Version 2.0 (the "License");
 *    you may not use this file except in compliance with the License.
 *    You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0
 *
 *    Unless required by applicable law or agreed to in writing, software
 *    distributed under the License is distributed on an "AS IS" BASIS,
 *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *    See the License for the specific language governing permissions and
 *    limitations under the License.
 */

// THIS FILE IS GENERATED BY ZAP

#include <cinttypes>
#include <cstdint>

#include <app-common/zap-generated/callback.h>
#include <app-common/zap-generated/cluster-objects.h>
#include <app-common/zap-generated/ids/Clusters.h>
#include <app-common/zap-generated/ids/Commands.h>
#include <app/CommandHandler.h>
#include <app/InteractionModelEngine.h>
#include <app/util/util.h>
#include <lib/core/CHIPSafeCasts.h>
#include <lib/support/TypeTraits.h>

namespace chip {
namespace app {

// Cluster specific command parsing

namespace Clusters {

namespace AccountLogin {

Protocols::InteractionModel::Status DispatchServerCommand(CommandHandler * apCommandObj, const ConcreteCommandPath & aCommandPath,
                                                          TLV::TLVReader & aDataTlv)
{
    CHIP_ERROR TLVError = CHIP_NO_ERROR;
    bool wasHandled     = false;
    {
        switch (aCommandPath.mCommandId)
        {
        case Commands::GetSetupPIN::Id: {
            Commands::GetSetupPIN::DecodableType commandData;
            TLVError = commandData.Decode(aDataTlv, apCommandObj->GetAccessingFabricIndex());
            if (TLVError == CHIP_NO_ERROR)
            {
                wasHandled = emberAfAccountLoginClusterGetSetupPINCallback(apCommandObj, aCommandPath, commandData);
            }
            break;
        }
        case Commands::Login::Id: {
            Commands::Login::DecodableType commandData;
            TLVError = commandData.Decode(aDataTlv, apCommandObj->GetAccessingFabricIndex());
            if (TLVError == CHIP_NO_ERROR)
            {
                wasHandled = emberAfAccountLoginClusterLoginCallback(apCommandObj, aCommandPath, commandData);
            }
            break;
        }
        case Commands::Logout::Id: {
            Commands::Logout::DecodableType commandData;
            TLVError = commandData.Decode(aDataTlv, apCommandObj->GetAccessingFabricIndex());
            if (TLVError == CHIP_NO_ERROR)
            {
                wasHandled = emberAfAccountLoginClusterLogoutCallback(apCommandObj, aCommandPath, commandData);
            }
            break;
        }
        default: {
            // Unrecognized command ID, error status will apply.
            ChipLogError(Zcl, "Unknown command " ChipLogFormatMEI " for cluster " ChipLogFormatMEI,
                         ChipLogValueMEI(aCommandPath.mCommandId), ChipLogValueMEI(aCommandPath.mClusterId));
            return Protocols::InteractionModel::Status::UnsupportedCommand;
        }
        }
    }

    if (CHIP_NO_ERROR != TLVError || !wasHandled)
    {
        ChipLogProgress(Zcl, "Failed to dispatch command, TLVError=%" CHIP_ERROR_FORMAT, TLVError.Format());
        return Protocols::InteractionModel::Status::InvalidCommand;
    }

    // We use success as a marker that no special handling is required
    // This is to avoid having a std::optional which uses slightly more code.
    return Protocols::InteractionModel::Status::Success;
}

} // namespace AccountLogin

namespace ApplicationLauncher {

Protocols::InteractionModel::Status DispatchServerCommand(CommandHandler * apCommandObj, const ConcreteCommandPath & aCommandPath,
                                                          TLV::TLVReader & aDataTlv)
{
    CHIP_ERROR TLVError = CHIP_NO_ERROR;
    bool wasHandled     = false;
    {
        switch (aCommandPath.mCommandId)
        {
        case Commands::LaunchApp::Id: {
            Commands::LaunchApp::DecodableType commandData;
            TLVError = DataModel::Decode(aDataTlv, commandData);
            if (TLVError == CHIP_NO_ERROR)
            {
                wasHandled = emberAfApplicationLauncherClusterLaunchAppCallback(apCommandObj, aCommandPath, commandData);
            }
            break;
        }
        case Commands::StopApp::Id: {
            Commands::StopApp::DecodableType commandData;
            TLVError = DataModel::Decode(aDataTlv, commandData);
            if (TLVError == CHIP_NO_ERROR)
            {
                wasHandled = emberAfApplicationLauncherClusterStopAppCallback(apCommandObj, aCommandPath, commandData);
            }
            break;
        }
        case Commands::HideApp::Id: {
            Commands::HideApp::DecodableType commandData;
            TLVError = DataModel::Decode(aDataTlv, commandData);
            if (TLVError == CHIP_NO_ERROR)
            {
                wasHandled = emberAfApplicationLauncherClusterHideAppCallback(apCommandObj, aCommandPath, commandData);
            }
            break;
        }
        default: {
            // Unrecognized command ID, error status will apply.
            ChipLogError(Zcl, "Unknown command " ChipLogFormatMEI " for cluster " ChipLogFormatMEI,
                         ChipLogValueMEI(aCommandPath.mCommandId), ChipLogValueMEI(aCommandPath.mClusterId));
            return Protocols::InteractionModel::Status::UnsupportedCommand;
        }
        }
    }

    if (CHIP_NO_ERROR != TLVError || !wasHandled)
    {
        ChipLogProgress(Zcl, "Failed to dispatch command, TLVError=%" CHIP_ERROR_FORMAT, TLVError.Format());
        return Protocols::InteractionModel::Status::InvalidCommand;
    }

    // We use success as a marker that no special handling is required
    // This is to avoid having a std::optional which uses slightly more code.
    return Protocols::InteractionModel::Status::Success;
}

} // namespace ApplicationLauncher

namespace AudioOutput {

Protocols::InteractionModel::Status DispatchServerCommand(CommandHandler * apCommandObj, const ConcreteCommandPath & aCommandPath,
                                                          TLV::TLVReader & aDataTlv)
{
    CHIP_ERROR TLVError = CHIP_NO_ERROR;
    bool wasHandled     = false;
    {
        switch (aCommandPath.mCommandId)
        {
        case Commands::SelectOutput::Id: {
            Commands::SelectOutput::DecodableType commandData;
            TLVError = DataModel::Decode(aDataTlv, commandData);
            if (TLVError == CHIP_NO_ERROR)
            {
                wasHandled = emberAfAudioOutputClusterSelectOutputCallback(apCommandObj, aCommandPath, commandData);
            }
            break;
        }
        case Commands::RenameOutput::Id: {
            Commands::RenameOutput::DecodableType commandData;
            TLVError = DataModel::Decode(aDataTlv, commandData);
            if (TLVError == CHIP_NO_ERROR)
            {
                wasHandled = emberAfAudioOutputClusterRenameOutputCallback(apCommandObj, aCommandPath, commandData);
            }
            break;
        }
        default: {
            // Unrecognized command ID, error status will apply.
            ChipLogError(Zcl, "Unknown command " ChipLogFormatMEI " for cluster " ChipLogFormatMEI,
                         ChipLogValueMEI(aCommandPath.mCommandId), ChipLogValueMEI(aCommandPath.mClusterId));
            return Protocols::InteractionModel::Status::UnsupportedCommand;
        }
        }
    }

    if (CHIP_NO_ERROR != TLVError || !wasHandled)
    {
        ChipLogProgress(Zcl, "Failed to dispatch command, TLVError=%" CHIP_ERROR_FORMAT, TLVError.Format());
        return Protocols::InteractionModel::Status::InvalidCommand;
    }

    // We use success as a marker that no special handling is required
    // This is to avoid having a std::optional which uses slightly more code.
    return Protocols::InteractionModel::Status::Success;
}

} // namespace AudioOutput

namespace Channel {

Protocols::InteractionModel::Status DispatchServerCommand(CommandHandler * apCommandObj, const ConcreteCommandPath & aCommandPath,
                                                          TLV::TLVReader & aDataTlv)
{
    CHIP_ERROR TLVError = CHIP_NO_ERROR;
    bool wasHandled     = false;
    {
        switch (aCommandPath.mCommandId)
        {
        case Commands::ChangeChannel::Id: {
            Commands::ChangeChannel::DecodableType commandData;
            TLVError = DataModel::Decode(aDataTlv, commandData);
            if (TLVError == CHIP_NO_ERROR)
            {
                wasHandled = emberAfChannelClusterChangeChannelCallback(apCommandObj, aCommandPath, commandData);
            }
            break;
        }
        case Commands::ChangeChannelByNumber::Id: {
            Commands::ChangeChannelByNumber::DecodableType commandData;
            TLVError = DataModel::Decode(aDataTlv, commandData);
            if (TLVError == CHIP_NO_ERROR)
            {
                wasHandled = emberAfChannelClusterChangeChannelByNumberCallback(apCommandObj, aCommandPath, commandData);
            }
            break;
        }
        case Commands::SkipChannel::Id: {
            Commands::SkipChannel::DecodableType commandData;
            TLVError = DataModel::Decode(aDataTlv, commandData);
            if (TLVError == CHIP_NO_ERROR)
            {
                wasHandled = emberAfChannelClusterSkipChannelCallback(apCommandObj, aCommandPath, commandData);
            }
            break;
        }
        case Commands::GetProgramGuide::Id: {
            Commands::GetProgramGuide::DecodableType commandData;
            TLVError = DataModel::Decode(aDataTlv, commandData);
            if (TLVError == CHIP_NO_ERROR)
            {
                wasHandled = emberAfChannelClusterGetProgramGuideCallback(apCommandObj, aCommandPath, commandData);
            }
            break;
        }
        case Commands::RecordProgram::Id: {
            Commands::RecordProgram::DecodableType commandData;
            TLVError = DataModel::Decode(aDataTlv, commandData);
            if (TLVError == CHIP_NO_ERROR)
            {
                wasHandled = emberAfChannelClusterRecordProgramCallback(apCommandObj, aCommandPath, commandData);
            }
            break;
        }
        case Commands::CancelRecordProgram::Id: {
            Commands::CancelRecordProgram::DecodableType commandData;
            TLVError = DataModel::Decode(aDataTlv, commandData);
            if (TLVError == CHIP_NO_ERROR)
            {
                wasHandled = emberAfChannelClusterCancelRecordProgramCallback(apCommandObj, aCommandPath, commandData);
            }
            break;
        }
        default: {
            // Unrecognized command ID, error status will apply.
            ChipLogError(Zcl, "Unknown command " ChipLogFormatMEI " for cluster " ChipLogFormatMEI,
                         ChipLogValueMEI(aCommandPath.mCommandId), ChipLogValueMEI(aCommandPath.mClusterId));
            return Protocols::InteractionModel::Status::UnsupportedCommand;
        }
        }
    }

    if (CHIP_NO_ERROR != TLVError || !wasHandled)
    {
        ChipLogProgress(Zcl, "Failed to dispatch command, TLVError=%" CHIP_ERROR_FORMAT, TLVError.Format());
        return Protocols::InteractionModel::Status::InvalidCommand;
    }

    // We use success as a marker that no special handling is required
    // This is to avoid having a std::optional which uses slightly more code.
    return Protocols::InteractionModel::Status::Success;
}

} // namespace Channel

namespace ContentControl {

Protocols::InteractionModel::Status DispatchServerCommand(CommandHandler * apCommandObj, const ConcreteCommandPath & aCommandPath,
                                                          TLV::TLVReader & aDataTlv)
{
    CHIP_ERROR TLVError = CHIP_NO_ERROR;
    bool wasHandled     = false;
    {
        switch (aCommandPath.mCommandId)
        {
        case Commands::UpdatePIN::Id: {
            Commands::UpdatePIN::DecodableType commandData;
            TLVError = DataModel::Decode(aDataTlv, commandData);
            if (TLVError == CHIP_NO_ERROR)
            {
                wasHandled = emberAfContentControlClusterUpdatePINCallback(apCommandObj, aCommandPath, commandData);
            }
            break;
        }
        case Commands::ResetPIN::Id: {
            Commands::ResetPIN::DecodableType commandData;
            TLVError = DataModel::Decode(aDataTlv, commandData);
            if (TLVError == CHIP_NO_ERROR)
            {
                wasHandled = emberAfContentControlClusterResetPINCallback(apCommandObj, aCommandPath, commandData);
            }
            break;
        }
        case Commands::Enable::Id: {
            Commands::Enable::DecodableType commandData;
            TLVError = DataModel::Decode(aDataTlv, commandData);
            if (TLVError == CHIP_NO_ERROR)
            {
                wasHandled = emberAfContentControlClusterEnableCallback(apCommandObj, aCommandPath, commandData);
            }
            break;
        }
        case Commands::Disable::Id: {
            Commands::Disable::DecodableType commandData;
            TLVError = DataModel::Decode(aDataTlv, commandData);
            if (TLVError == CHIP_NO_ERROR)
            {
                wasHandled = emberAfContentControlClusterDisableCallback(apCommandObj, aCommandPath, commandData);
            }
            break;
        }
        case Commands::AddBonusTime::Id: {
            Commands::AddBonusTime::DecodableType commandData;
            TLVError = DataModel::Decode(aDataTlv, commandData);
            if (TLVError == CHIP_NO_ERROR)
            {
                wasHandled = emberAfContentControlClusterAddBonusTimeCallback(apCommandObj, aCommandPath, commandData);
            }
            break;
        }
        case Commands::SetScreenDailyTime::Id: {
            Commands::SetScreenDailyTime::DecodableType commandData;
            TLVError = DataModel::Decode(aDataTlv, commandData);
            if (TLVError == CHIP_NO_ERROR)
            {
                wasHandled = emberAfContentControlClusterSetScreenDailyTimeCallback(apCommandObj, aCommandPath, commandData);
            }
            break;
        }
        case Commands::BlockUnratedContent::Id: {
            Commands::BlockUnratedContent::DecodableType commandData;
            TLVError = DataModel::Decode(aDataTlv, commandData);
            if (TLVError == CHIP_NO_ERROR)
            {
                wasHandled = emberAfContentControlClusterBlockUnratedContentCallback(apCommandObj, aCommandPath, commandData);
            }
            break;
        }
        case Commands::UnblockUnratedContent::Id: {
            Commands::UnblockUnratedContent::DecodableType commandData;
            TLVError = DataModel::Decode(aDataTlv, commandData);
            if (TLVError == CHIP_NO_ERROR)
            {
                wasHandled = emberAfContentControlClusterUnblockUnratedContentCallback(apCommandObj, aCommandPath, commandData);
            }
            break;
        }
        case Commands::SetOnDemandRatingThreshold::Id: {
            Commands::SetOnDemandRatingThreshold::DecodableType commandData;
            TLVError = DataModel::Decode(aDataTlv, commandData);
            if (TLVError == CHIP_NO_ERROR)
            {
                wasHandled =
                    emberAfContentControlClusterSetOnDemandRatingThresholdCallback(apCommandObj, aCommandPath, commandData);
            }
            break;
        }
        case Commands::SetScheduledContentRatingThreshold::Id: {
            Commands::SetScheduledContentRatingThreshold::DecodableType commandData;
            TLVError = DataModel::Decode(aDataTlv, commandData);
            if (TLVError == CHIP_NO_ERROR)
            {
                wasHandled =
                    emberAfContentControlClusterSetScheduledContentRatingThresholdCallback(apCommandObj, aCommandPath, commandData);
            }
            break;
        }
        default: {
            // Unrecognized command ID, error status will apply.
            ChipLogError(Zcl, "Unknown command " ChipLogFormatMEI " for cluster " ChipLogFormatMEI,
                         ChipLogValueMEI(aCommandPath.mCommandId), ChipLogValueMEI(aCommandPath.mClusterId));
            return Protocols::InteractionModel::Status::UnsupportedCommand;
        }
        }
    }

    if (CHIP_NO_ERROR != TLVError || !wasHandled)
    {
        ChipLogProgress(Zcl, "Failed to dispatch command, TLVError=%" CHIP_ERROR_FORMAT, TLVError.Format());
        return Protocols::InteractionModel::Status::InvalidCommand;
    }

    // We use success as a marker that no special handling is required
    // This is to avoid having a std::optional which uses slightly more code.
    return Protocols::InteractionModel::Status::Success;
}

} // namespace ContentControl

namespace ContentLauncher {

Protocols::InteractionModel::Status DispatchServerCommand(CommandHandler * apCommandObj, const ConcreteCommandPath & aCommandPath,
                                                          TLV::TLVReader & aDataTlv)
{
    CHIP_ERROR TLVError = CHIP_NO_ERROR;
    bool wasHandled     = false;
    {
        switch (aCommandPath.mCommandId)
        {
        case Commands::LaunchContent::Id: {
            Commands::LaunchContent::DecodableType commandData;
            TLVError = DataModel::Decode(aDataTlv, commandData);
            if (TLVError == CHIP_NO_ERROR)
            {
                wasHandled = emberAfContentLauncherClusterLaunchContentCallback(apCommandObj, aCommandPath, commandData);
            }
            break;
        }
        case Commands::LaunchURL::Id: {
            Commands::LaunchURL::DecodableType commandData;
            TLVError = DataModel::Decode(aDataTlv, commandData);
            if (TLVError == CHIP_NO_ERROR)
            {
                wasHandled = emberAfContentLauncherClusterLaunchURLCallback(apCommandObj, aCommandPath, commandData);
            }
            break;
        }
        default: {
            // Unrecognized command ID, error status will apply.
            ChipLogError(Zcl, "Unknown command " ChipLogFormatMEI " for cluster " ChipLogFormatMEI,
                         ChipLogValueMEI(aCommandPath.mCommandId), ChipLogValueMEI(aCommandPath.mClusterId));
            return Protocols::InteractionModel::Status::UnsupportedCommand;
        }
        }
    }

    if (CHIP_NO_ERROR != TLVError || !wasHandled)
    {
        ChipLogProgress(Zcl, "Failed to dispatch command, TLVError=%" CHIP_ERROR_FORMAT, TLVError.Format());
        return Protocols::InteractionModel::Status::InvalidCommand;
    }

    // We use success as a marker that no special handling is required
    // This is to avoid having a std::optional which uses slightly more code.
    return Protocols::InteractionModel::Status::Success;
}

} // namespace ContentLauncher

namespace DiagnosticLogs {

Protocols::InteractionModel::Status DispatchServerCommand(CommandHandler * apCommandObj, const ConcreteCommandPath & aCommandPath,
                                                          TLV::TLVReader & aDataTlv)
{
    CHIP_ERROR TLVError = CHIP_NO_ERROR;
    bool wasHandled     = false;
    {
        switch (aCommandPath.mCommandId)
        {
        case Commands::RetrieveLogsRequest::Id: {
            Commands::RetrieveLogsRequest::DecodableType commandData;
            TLVError = DataModel::Decode(aDataTlv, commandData);
            if (TLVError == CHIP_NO_ERROR)
            {
                wasHandled = emberAfDiagnosticLogsClusterRetrieveLogsRequestCallback(apCommandObj, aCommandPath, commandData);
            }
            break;
        }
        default: {
            // Unrecognized command ID, error status will apply.
            ChipLogError(Zcl, "Unknown command " ChipLogFormatMEI " for cluster " ChipLogFormatMEI,
                         ChipLogValueMEI(aCommandPath.mCommandId), ChipLogValueMEI(aCommandPath.mClusterId));
            return Protocols::InteractionModel::Status::UnsupportedCommand;
        }
        }
    }

    if (CHIP_NO_ERROR != TLVError || !wasHandled)
    {
        ChipLogProgress(Zcl, "Failed to dispatch command, TLVError=%" CHIP_ERROR_FORMAT, TLVError.Format());
        return Protocols::InteractionModel::Status::InvalidCommand;
    }

    // We use success as a marker that no special handling is required
    // This is to avoid having a std::optional which uses slightly more code.
    return Protocols::InteractionModel::Status::Success;
}

} // namespace DiagnosticLogs

namespace EthernetNetworkDiagnostics {

Protocols::InteractionModel::Status DispatchServerCommand(CommandHandler * apCommandObj, const ConcreteCommandPath & aCommandPath,
                                                          TLV::TLVReader & aDataTlv)
{
    CHIP_ERROR TLVError = CHIP_NO_ERROR;
    bool wasHandled     = false;
    {
        switch (aCommandPath.mCommandId)
        {
        case Commands::ResetCounts::Id: {
            Commands::ResetCounts::DecodableType commandData;
            TLVError = DataModel::Decode(aDataTlv, commandData);
            if (TLVError == CHIP_NO_ERROR)
            {
                wasHandled = emberAfEthernetNetworkDiagnosticsClusterResetCountsCallback(apCommandObj, aCommandPath, commandData);
            }
            break;
        }
        default: {
            // Unrecognized command ID, error status will apply.
            ChipLogError(Zcl, "Unknown command " ChipLogFormatMEI " for cluster " ChipLogFormatMEI,
                         ChipLogValueMEI(aCommandPath.mCommandId), ChipLogValueMEI(aCommandPath.mClusterId));
            return Protocols::InteractionModel::Status::UnsupportedCommand;
        }
        }
    }

    if (CHIP_NO_ERROR != TLVError || !wasHandled)
    {
        ChipLogProgress(Zcl, "Failed to dispatch command, TLVError=%" CHIP_ERROR_FORMAT, TLVError.Format());
        return Protocols::InteractionModel::Status::InvalidCommand;
    }

    // We use success as a marker that no special handling is required
    // This is to avoid having a std::optional which uses slightly more code.
    return Protocols::InteractionModel::Status::Success;
}

} // namespace EthernetNetworkDiagnostics

namespace GroupKeyManagement {

Protocols::InteractionModel::Status DispatchServerCommand(CommandHandler * apCommandObj, const ConcreteCommandPath & aCommandPath,
                                                          TLV::TLVReader & aDataTlv)
{
    CHIP_ERROR TLVError = CHIP_NO_ERROR;
    bool wasHandled     = false;
    {
        switch (aCommandPath.mCommandId)
        {
        case Commands::KeySetWrite::Id: {
            Commands::KeySetWrite::DecodableType commandData;
            TLVError = commandData.Decode(aDataTlv, apCommandObj->GetAccessingFabricIndex());
            if (TLVError == CHIP_NO_ERROR)
            {
                wasHandled = emberAfGroupKeyManagementClusterKeySetWriteCallback(apCommandObj, aCommandPath, commandData);
            }
            break;
        }
        case Commands::KeySetRead::Id: {
            Commands::KeySetRead::DecodableType commandData;
            TLVError = commandData.Decode(aDataTlv, apCommandObj->GetAccessingFabricIndex());
            if (TLVError == CHIP_NO_ERROR)
            {
                wasHandled = emberAfGroupKeyManagementClusterKeySetReadCallback(apCommandObj, aCommandPath, commandData);
            }
            break;
        }
        case Commands::KeySetRemove::Id: {
            Commands::KeySetRemove::DecodableType commandData;
            TLVError = commandData.Decode(aDataTlv, apCommandObj->GetAccessingFabricIndex());
            if (TLVError == CHIP_NO_ERROR)
            {
                wasHandled = emberAfGroupKeyManagementClusterKeySetRemoveCallback(apCommandObj, aCommandPath, commandData);
            }
            break;
        }
        case Commands::KeySetReadAllIndices::Id: {
            Commands::KeySetReadAllIndices::DecodableType commandData;
            TLVError = commandData.Decode(aDataTlv, apCommandObj->GetAccessingFabricIndex());
            if (TLVError == CHIP_NO_ERROR)
            {
                wasHandled = emberAfGroupKeyManagementClusterKeySetReadAllIndicesCallback(apCommandObj, aCommandPath, commandData);
            }
            break;
        }
        default: {
            // Unrecognized command ID, error status will apply.
            ChipLogError(Zcl, "Unknown command " ChipLogFormatMEI " for cluster " ChipLogFormatMEI,
                         ChipLogValueMEI(aCommandPath.mCommandId), ChipLogValueMEI(aCommandPath.mClusterId));
            return Protocols::InteractionModel::Status::UnsupportedCommand;
        }
        }
    }

    if (CHIP_NO_ERROR != TLVError || !wasHandled)
    {
        ChipLogProgress(Zcl, "Failed to dispatch command, TLVError=%" CHIP_ERROR_FORMAT, TLVError.Format());
        return Protocols::InteractionModel::Status::InvalidCommand;
    }

    // We use success as a marker that no special handling is required
    // This is to avoid having a std::optional which uses slightly more code.
    return Protocols::InteractionModel::Status::Success;
}

} // namespace GroupKeyManagement

namespace KeypadInput {

Protocols::InteractionModel::Status DispatchServerCommand(CommandHandler * apCommandObj, const ConcreteCommandPath & aCommandPath,
                                                          TLV::TLVReader & aDataTlv)
{
    CHIP_ERROR TLVError = CHIP_NO_ERROR;
    bool wasHandled     = false;
    {
        switch (aCommandPath.mCommandId)
        {
        case Commands::SendKey::Id: {
            Commands::SendKey::DecodableType commandData;
            TLVError = DataModel::Decode(aDataTlv, commandData);
            if (TLVError == CHIP_NO_ERROR)
            {
                wasHandled = emberAfKeypadInputClusterSendKeyCallback(apCommandObj, aCommandPath, commandData);
            }
            break;
        }
        default: {
            // Unrecognized command ID, error status will apply.
            ChipLogError(Zcl, "Unknown command " ChipLogFormatMEI " for cluster " ChipLogFormatMEI,
                         ChipLogValueMEI(aCommandPath.mCommandId), ChipLogValueMEI(aCommandPath.mClusterId));
            return Protocols::InteractionModel::Status::UnsupportedCommand;
        }
        }
    }

    if (CHIP_NO_ERROR != TLVError || !wasHandled)
    {
        ChipLogProgress(Zcl, "Failed to dispatch command, TLVError=%" CHIP_ERROR_FORMAT, TLVError.Format());
        return Protocols::InteractionModel::Status::InvalidCommand;
    }

    // We use success as a marker that no special handling is required
    // This is to avoid having a std::optional which uses slightly more code.
    return Protocols::InteractionModel::Status::Success;
}

} // namespace KeypadInput

namespace LevelControl {

Protocols::InteractionModel::Status DispatchServerCommand(CommandHandler * apCommandObj, const ConcreteCommandPath & aCommandPath,
                                                          TLV::TLVReader & aDataTlv)
{
    CHIP_ERROR TLVError = CHIP_NO_ERROR;
    bool wasHandled     = false;
    {
        switch (aCommandPath.mCommandId)
        {
        case Commands::MoveToLevel::Id: {
            Commands::MoveToLevel::DecodableType commandData;
            TLVError = DataModel::Decode(aDataTlv, commandData);
            if (TLVError == CHIP_NO_ERROR)
            {
                wasHandled = emberAfLevelControlClusterMoveToLevelCallback(apCommandObj, aCommandPath, commandData);
            }
            break;
        }
        case Commands::Move::Id: {
            Commands::Move::DecodableType commandData;
            TLVError = DataModel::Decode(aDataTlv, commandData);
            if (TLVError == CHIP_NO_ERROR)
            {
                wasHandled = emberAfLevelControlClusterMoveCallback(apCommandObj, aCommandPath, commandData);
            }
            break;
        }
        case Commands::Step::Id: {
            Commands::Step::DecodableType commandData;
            TLVError = DataModel::Decode(aDataTlv, commandData);
            if (TLVError == CHIP_NO_ERROR)
            {
                wasHandled = emberAfLevelControlClusterStepCallback(apCommandObj, aCommandPath, commandData);
            }
            break;
        }
        case Commands::Stop::Id: {
            Commands::Stop::DecodableType commandData;
            TLVError = DataModel::Decode(aDataTlv, commandData);
            if (TLVError == CHIP_NO_ERROR)
            {
                wasHandled = emberAfLevelControlClusterStopCallback(apCommandObj, aCommandPath, commandData);
            }
            break;
        }
        case Commands::MoveToLevelWithOnOff::Id: {
            Commands::MoveToLevelWithOnOff::DecodableType commandData;
            TLVError = DataModel::Decode(aDataTlv, commandData);
            if (TLVError == CHIP_NO_ERROR)
            {
                wasHandled = emberAfLevelControlClusterMoveToLevelWithOnOffCallback(apCommandObj, aCommandPath, commandData);
            }
            break;
        }
        case Commands::MoveWithOnOff::Id: {
            Commands::MoveWithOnOff::DecodableType commandData;
            TLVError = DataModel::Decode(aDataTlv, commandData);
            if (TLVError == CHIP_NO_ERROR)
            {
                wasHandled = emberAfLevelControlClusterMoveWithOnOffCallback(apCommandObj, aCommandPath, commandData);
            }
            break;
        }
        case Commands::StepWithOnOff::Id: {
            Commands::StepWithOnOff::DecodableType commandData;
            TLVError = DataModel::Decode(aDataTlv, commandData);
            if (TLVError == CHIP_NO_ERROR)
            {
                wasHandled = emberAfLevelControlClusterStepWithOnOffCallback(apCommandObj, aCommandPath, commandData);
            }
            break;
        }
        case Commands::StopWithOnOff::Id: {
            Commands::StopWithOnOff::DecodableType commandData;
            TLVError = DataModel::Decode(aDataTlv, commandData);
            if (TLVError == CHIP_NO_ERROR)
            {
                wasHandled = emberAfLevelControlClusterStopWithOnOffCallback(apCommandObj, aCommandPath, commandData);
            }
            break;
        }
        default: {
            // Unrecognized command ID, error status will apply.
            ChipLogError(Zcl, "Unknown command " ChipLogFormatMEI " for cluster " ChipLogFormatMEI,
                         ChipLogValueMEI(aCommandPath.mCommandId), ChipLogValueMEI(aCommandPath.mClusterId));
            return Protocols::InteractionModel::Status::UnsupportedCommand;
        }
        }
    }

    if (CHIP_NO_ERROR != TLVError || !wasHandled)
    {
        ChipLogProgress(Zcl, "Failed to dispatch command, TLVError=%" CHIP_ERROR_FORMAT, TLVError.Format());
        return Protocols::InteractionModel::Status::InvalidCommand;
    }

    // We use success as a marker that no special handling is required
    // This is to avoid having a std::optional which uses slightly more code.
    return Protocols::InteractionModel::Status::Success;
}

} // namespace LevelControl

namespace LowPower {

Protocols::InteractionModel::Status DispatchServerCommand(CommandHandler * apCommandObj, const ConcreteCommandPath & aCommandPath,
                                                          TLV::TLVReader & aDataTlv)
{
    CHIP_ERROR TLVError = CHIP_NO_ERROR;
    bool wasHandled     = false;
    {
        switch (aCommandPath.mCommandId)
        {
        case Commands::Sleep::Id: {
            Commands::Sleep::DecodableType commandData;
            TLVError = DataModel::Decode(aDataTlv, commandData);
            if (TLVError == CHIP_NO_ERROR)
            {
                wasHandled = emberAfLowPowerClusterSleepCallback(apCommandObj, aCommandPath, commandData);
            }
            break;
        }
        default: {
            // Unrecognized command ID, error status will apply.
            ChipLogError(Zcl, "Unknown command " ChipLogFormatMEI " for cluster " ChipLogFormatMEI,
                         ChipLogValueMEI(aCommandPath.mCommandId), ChipLogValueMEI(aCommandPath.mClusterId));
            return Protocols::InteractionModel::Status::UnsupportedCommand;
        }
        }
    }

    if (CHIP_NO_ERROR != TLVError || !wasHandled)
    {
        ChipLogProgress(Zcl, "Failed to dispatch command, TLVError=%" CHIP_ERROR_FORMAT, TLVError.Format());
        return Protocols::InteractionModel::Status::InvalidCommand;
    }

    // We use success as a marker that no special handling is required
    // This is to avoid having a std::optional which uses slightly more code.
    return Protocols::InteractionModel::Status::Success;
}

} // namespace LowPower

namespace MediaInput {

Protocols::InteractionModel::Status DispatchServerCommand(CommandHandler * apCommandObj, const ConcreteCommandPath & aCommandPath,
                                                          TLV::TLVReader & aDataTlv)
{
    CHIP_ERROR TLVError = CHIP_NO_ERROR;
    bool wasHandled     = false;
    {
        switch (aCommandPath.mCommandId)
        {
        case Commands::SelectInput::Id: {
            Commands::SelectInput::DecodableType commandData;
            TLVError = DataModel::Decode(aDataTlv, commandData);
            if (TLVError == CHIP_NO_ERROR)
            {
                wasHandled = emberAfMediaInputClusterSelectInputCallback(apCommandObj, aCommandPath, commandData);
            }
            break;
        }
        case Commands::ShowInputStatus::Id: {
            Commands::ShowInputStatus::DecodableType commandData;
            TLVError = DataModel::Decode(aDataTlv, commandData);
            if (TLVError == CHIP_NO_ERROR)
            {
                wasHandled = emberAfMediaInputClusterShowInputStatusCallback(apCommandObj, aCommandPath, commandData);
            }
            break;
        }
        case Commands::HideInputStatus::Id: {
            Commands::HideInputStatus::DecodableType commandData;
            TLVError = DataModel::Decode(aDataTlv, commandData);
            if (TLVError == CHIP_NO_ERROR)
            {
                wasHandled = emberAfMediaInputClusterHideInputStatusCallback(apCommandObj, aCommandPath, commandData);
            }
            break;
        }
        case Commands::RenameInput::Id: {
            Commands::RenameInput::DecodableType commandData;
            TLVError = DataModel::Decode(aDataTlv, commandData);
            if (TLVError == CHIP_NO_ERROR)
            {
                wasHandled = emberAfMediaInputClusterRenameInputCallback(apCommandObj, aCommandPath, commandData);
            }
            break;
        }
        default: {
            // Unrecognized command ID, error status will apply.
            ChipLogError(Zcl, "Unknown command " ChipLogFormatMEI " for cluster " ChipLogFormatMEI,
                         ChipLogValueMEI(aCommandPath.mCommandId), ChipLogValueMEI(aCommandPath.mClusterId));
            return Protocols::InteractionModel::Status::UnsupportedCommand;
        }
        }
    }

    if (CHIP_NO_ERROR != TLVError || !wasHandled)
    {
        ChipLogProgress(Zcl, "Failed to dispatch command, TLVError=%" CHIP_ERROR_FORMAT, TLVError.Format());
        return Protocols::InteractionModel::Status::InvalidCommand;
    }

    // We use success as a marker that no special handling is required
    // This is to avoid having a std::optional which uses slightly more code.
    return Protocols::InteractionModel::Status::Success;
}

} // namespace MediaInput

namespace MediaPlayback {

Protocols::InteractionModel::Status DispatchServerCommand(CommandHandler * apCommandObj, const ConcreteCommandPath & aCommandPath,
                                                          TLV::TLVReader & aDataTlv)
{
    CHIP_ERROR TLVError = CHIP_NO_ERROR;
    bool wasHandled     = false;
    {
        switch (aCommandPath.mCommandId)
        {
        case Commands::Play::Id: {
            Commands::Play::DecodableType commandData;
            TLVError = DataModel::Decode(aDataTlv, commandData);
            if (TLVError == CHIP_NO_ERROR)
            {
                wasHandled = emberAfMediaPlaybackClusterPlayCallback(apCommandObj, aCommandPath, commandData);
            }
            break;
        }
        case Commands::Pause::Id: {
            Commands::Pause::DecodableType commandData;
            TLVError = DataModel::Decode(aDataTlv, commandData);
            if (TLVError == CHIP_NO_ERROR)
            {
                wasHandled = emberAfMediaPlaybackClusterPauseCallback(apCommandObj, aCommandPath, commandData);
            }
            break;
        }
        case Commands::Stop::Id: {
            Commands::Stop::DecodableType commandData;
            TLVError = DataModel::Decode(aDataTlv, commandData);
            if (TLVError == CHIP_NO_ERROR)
            {
                wasHandled = emberAfMediaPlaybackClusterStopCallback(apCommandObj, aCommandPath, commandData);
            }
            break;
        }
        case Commands::StartOver::Id: {
            Commands::StartOver::DecodableType commandData;
            TLVError = DataModel::Decode(aDataTlv, commandData);
            if (TLVError == CHIP_NO_ERROR)
            {
                wasHandled = emberAfMediaPlaybackClusterStartOverCallback(apCommandObj, aCommandPath, commandData);
            }
            break;
        }
        case Commands::Previous::Id: {
            Commands::Previous::DecodableType commandData;
            TLVError = DataModel::Decode(aDataTlv, commandData);
            if (TLVError == CHIP_NO_ERROR)
            {
                wasHandled = emberAfMediaPlaybackClusterPreviousCallback(apCommandObj, aCommandPath, commandData);
            }
            break;
        }
        case Commands::Next::Id: {
            Commands::Next::DecodableType commandData;
            TLVError = DataModel::Decode(aDataTlv, commandData);
            if (TLVError == CHIP_NO_ERROR)
            {
                wasHandled = emberAfMediaPlaybackClusterNextCallback(apCommandObj, aCommandPath, commandData);
            }
            break;
        }
        case Commands::Rewind::Id: {
            Commands::Rewind::DecodableType commandData;
            TLVError = DataModel::Decode(aDataTlv, commandData);
            if (TLVError == CHIP_NO_ERROR)
            {
                wasHandled = emberAfMediaPlaybackClusterRewindCallback(apCommandObj, aCommandPath, commandData);
            }
            break;
        }
        case Commands::FastForward::Id: {
            Commands::FastForward::DecodableType commandData;
            TLVError = DataModel::Decode(aDataTlv, commandData);
            if (TLVError == CHIP_NO_ERROR)
            {
                wasHandled = emberAfMediaPlaybackClusterFastForwardCallback(apCommandObj, aCommandPath, commandData);
            }
            break;
        }
        case Commands::SkipForward::Id: {
            Commands::SkipForward::DecodableType commandData;
            TLVError = DataModel::Decode(aDataTlv, commandData);
            if (TLVError == CHIP_NO_ERROR)
            {
                wasHandled = emberAfMediaPlaybackClusterSkipForwardCallback(apCommandObj, aCommandPath, commandData);
            }
            break;
        }
        case Commands::SkipBackward::Id: {
            Commands::SkipBackward::DecodableType commandData;
            TLVError = DataModel::Decode(aDataTlv, commandData);
            if (TLVError == CHIP_NO_ERROR)
            {
                wasHandled = emberAfMediaPlaybackClusterSkipBackwardCallback(apCommandObj, aCommandPath, commandData);
            }
            break;
        }
        case Commands::Seek::Id: {
            Commands::Seek::DecodableType commandData;
            TLVError = DataModel::Decode(aDataTlv, commandData);
            if (TLVError == CHIP_NO_ERROR)
            {
                wasHandled = emberAfMediaPlaybackClusterSeekCallback(apCommandObj, aCommandPath, commandData);
            }
            break;
        }
        case Commands::ActivateAudioTrack::Id: {
            Commands::ActivateAudioTrack::DecodableType commandData;
            TLVError = DataModel::Decode(aDataTlv, commandData);
            if (TLVError == CHIP_NO_ERROR)
            {
                wasHandled = emberAfMediaPlaybackClusterActivateAudioTrackCallback(apCommandObj, aCommandPath, commandData);
            }
            break;
        }
        case Commands::ActivateTextTrack::Id: {
            Commands::ActivateTextTrack::DecodableType commandData;
            TLVError = DataModel::Decode(aDataTlv, commandData);
            if (TLVError == CHIP_NO_ERROR)
            {
                wasHandled = emberAfMediaPlaybackClusterActivateTextTrackCallback(apCommandObj, aCommandPath, commandData);
            }
            break;
        }
        case Commands::DeactivateTextTrack::Id: {
            Commands::DeactivateTextTrack::DecodableType commandData;
            TLVError = DataModel::Decode(aDataTlv, commandData);
            if (TLVError == CHIP_NO_ERROR)
            {
                wasHandled = emberAfMediaPlaybackClusterDeactivateTextTrackCallback(apCommandObj, aCommandPath, commandData);
            }
            break;
        }
        default: {
            // Unrecognized command ID, error status will apply.
            ChipLogError(Zcl, "Unknown command " ChipLogFormatMEI " for cluster " ChipLogFormatMEI,
                         ChipLogValueMEI(aCommandPath.mCommandId), ChipLogValueMEI(aCommandPath.mClusterId));
            return Protocols::InteractionModel::Status::UnsupportedCommand;
        }
        }
    }

    if (CHIP_NO_ERROR != TLVError || !wasHandled)
    {
        ChipLogProgress(Zcl, "Failed to dispatch command, TLVError=%" CHIP_ERROR_FORMAT, TLVError.Format());
        return Protocols::InteractionModel::Status::InvalidCommand;
    }

    // We use success as a marker that no special handling is required
    // This is to avoid having a std::optional which uses slightly more code.
    return Protocols::InteractionModel::Status::Success;
}

} // namespace MediaPlayback

namespace Messages {

Protocols::InteractionModel::Status DispatchServerCommand(CommandHandler * apCommandObj, const ConcreteCommandPath & aCommandPath,
                                                          TLV::TLVReader & aDataTlv)
{
    CHIP_ERROR TLVError = CHIP_NO_ERROR;
    bool wasHandled     = false;
    {
        switch (aCommandPath.mCommandId)
        {
        case Commands::PresentMessagesRequest::Id: {
            Commands::PresentMessagesRequest::DecodableType commandData;
            TLVError = commandData.Decode(aDataTlv, apCommandObj->GetAccessingFabricIndex());
            if (TLVError == CHIP_NO_ERROR)
            {
                wasHandled = emberAfMessagesClusterPresentMessagesRequestCallback(apCommandObj, aCommandPath, commandData);
            }
            break;
        }
        case Commands::CancelMessagesRequest::Id: {
            Commands::CancelMessagesRequest::DecodableType commandData;
            TLVError = commandData.Decode(aDataTlv, apCommandObj->GetAccessingFabricIndex());
            if (TLVError == CHIP_NO_ERROR)
            {
                wasHandled = emberAfMessagesClusterCancelMessagesRequestCallback(apCommandObj, aCommandPath, commandData);
            }
            break;
        }
        default: {
            // Unrecognized command ID, error status will apply.
            ChipLogError(Zcl, "Unknown command " ChipLogFormatMEI " for cluster " ChipLogFormatMEI,
                         ChipLogValueMEI(aCommandPath.mCommandId), ChipLogValueMEI(aCommandPath.mClusterId));
            return Protocols::InteractionModel::Status::UnsupportedCommand;
        }
        }
    }

    if (CHIP_NO_ERROR != TLVError || !wasHandled)
    {
        ChipLogProgress(Zcl, "Failed to dispatch command, TLVError=%" CHIP_ERROR_FORMAT, TLVError.Format());
        return Protocols::InteractionModel::Status::InvalidCommand;
    }

    // We use success as a marker that no special handling is required
    // This is to avoid having a std::optional which uses slightly more code.
    return Protocols::InteractionModel::Status::Success;
}

} // namespace Messages

namespace OnOff {

Protocols::InteractionModel::Status DispatchServerCommand(CommandHandler * apCommandObj, const ConcreteCommandPath & aCommandPath,
                                                          TLV::TLVReader & aDataTlv)
{
    CHIP_ERROR TLVError = CHIP_NO_ERROR;
    bool wasHandled     = false;
    {
        switch (aCommandPath.mCommandId)
        {
        case Commands::Off::Id: {
            Commands::Off::DecodableType commandData;
            TLVError = DataModel::Decode(aDataTlv, commandData);
            if (TLVError == CHIP_NO_ERROR)
            {
                wasHandled = emberAfOnOffClusterOffCallback(apCommandObj, aCommandPath, commandData);
            }
            break;
        }
        case Commands::On::Id: {
            Commands::On::DecodableType commandData;
            TLVError = DataModel::Decode(aDataTlv, commandData);
            if (TLVError == CHIP_NO_ERROR)
            {
                wasHandled = emberAfOnOffClusterOnCallback(apCommandObj, aCommandPath, commandData);
            }
            break;
        }
        case Commands::Toggle::Id: {
            Commands::Toggle::DecodableType commandData;
            TLVError = DataModel::Decode(aDataTlv, commandData);
            if (TLVError == CHIP_NO_ERROR)
            {
                wasHandled = emberAfOnOffClusterToggleCallback(apCommandObj, aCommandPath, commandData);
            }
            break;
        }
        default: {
            // Unrecognized command ID, error status will apply.
            ChipLogError(Zcl, "Unknown command " ChipLogFormatMEI " for cluster " ChipLogFormatMEI,
                         ChipLogValueMEI(aCommandPath.mCommandId), ChipLogValueMEI(aCommandPath.mClusterId));
            return Protocols::InteractionModel::Status::UnsupportedCommand;
        }
        }
    }

    if (CHIP_NO_ERROR != TLVError || !wasHandled)
    {
        ChipLogProgress(Zcl, "Failed to dispatch command, TLVError=%" CHIP_ERROR_FORMAT, TLVError.Format());
        return Protocols::InteractionModel::Status::InvalidCommand;
    }

    // We use success as a marker that no special handling is required
    // This is to avoid having a std::optional which uses slightly more code.
    return Protocols::InteractionModel::Status::Success;
}

} // namespace OnOff

namespace OperationalCredentials {

Protocols::InteractionModel::Status DispatchServerCommand(CommandHandler * apCommandObj, const ConcreteCommandPath & aCommandPath,
                                                          TLV::TLVReader & aDataTlv)
{
    CHIP_ERROR TLVError = CHIP_NO_ERROR;
    bool wasHandled     = false;
    {
        switch (aCommandPath.mCommandId)
        {
        case Commands::AttestationRequest::Id: {
            Commands::AttestationRequest::DecodableType commandData;
            TLVError = DataModel::Decode(aDataTlv, commandData);
            if (TLVError == CHIP_NO_ERROR)
            {
                wasHandled =
                    emberAfOperationalCredentialsClusterAttestationRequestCallback(apCommandObj, aCommandPath, commandData);
            }
            break;
        }
        case Commands::CertificateChainRequest::Id: {
            Commands::CertificateChainRequest::DecodableType commandData;
            TLVError = DataModel::Decode(aDataTlv, commandData);
            if (TLVError == CHIP_NO_ERROR)
            {
                wasHandled =
                    emberAfOperationalCredentialsClusterCertificateChainRequestCallback(apCommandObj, aCommandPath, commandData);
            }
            break;
        }
        case Commands::CSRRequest::Id: {
            Commands::CSRRequest::DecodableType commandData;
            TLVError = DataModel::Decode(aDataTlv, commandData);
            if (TLVError == CHIP_NO_ERROR)
            {
                wasHandled = emberAfOperationalCredentialsClusterCSRRequestCallback(apCommandObj, aCommandPath, commandData);
            }
            break;
        }
        case Commands::AddNOC::Id: {
            Commands::AddNOC::DecodableType commandData;
            TLVError = DataModel::Decode(aDataTlv, commandData);
            if (TLVError == CHIP_NO_ERROR)
            {
                wasHandled = emberAfOperationalCredentialsClusterAddNOCCallback(apCommandObj, aCommandPath, commandData);
            }
            break;
        }
        case Commands::UpdateNOC::Id: {
            Commands::UpdateNOC::DecodableType commandData;
            TLVError = commandData.Decode(aDataTlv, apCommandObj->GetAccessingFabricIndex());
            if (TLVError == CHIP_NO_ERROR)
            {
                wasHandled = emberAfOperationalCredentialsClusterUpdateNOCCallback(apCommandObj, aCommandPath, commandData);
            }
            break;
        }
        case Commands::UpdateFabricLabel::Id: {
            Commands::UpdateFabricLabel::DecodableType commandData;
            TLVError = commandData.Decode(aDataTlv, apCommandObj->GetAccessingFabricIndex());
            if (TLVError == CHIP_NO_ERROR)
            {
                wasHandled = emberAfOperationalCredentialsClusterUpdateFabricLabelCallback(apCommandObj, aCommandPath, commandData);
            }
            break;
        }
        case Commands::RemoveFabric::Id: {
            Commands::RemoveFabric::DecodableType commandData;
            TLVError = DataModel::Decode(aDataTlv, commandData);
            if (TLVError == CHIP_NO_ERROR)
            {
                wasHandled = emberAfOperationalCredentialsClusterRemoveFabricCallback(apCommandObj, aCommandPath, commandData);
            }
            break;
        }
        case Commands::AddTrustedRootCertificate::Id: {
            Commands::AddTrustedRootCertificate::DecodableType commandData;
            TLVError = DataModel::Decode(aDataTlv, commandData);
            if (TLVError == CHIP_NO_ERROR)
            {
                wasHandled =
                    emberAfOperationalCredentialsClusterAddTrustedRootCertificateCallback(apCommandObj, aCommandPath, commandData);
            }
            break;
        }
        default: {
            // Unrecognized command ID, error status will apply.
            ChipLogError(Zcl, "Unknown command " ChipLogFormatMEI " for cluster " ChipLogFormatMEI,
                         ChipLogValueMEI(aCommandPath.mCommandId), ChipLogValueMEI(aCommandPath.mClusterId));
            return Protocols::InteractionModel::Status::UnsupportedCommand;
        }
        }
    }

    if (CHIP_NO_ERROR != TLVError || !wasHandled)
    {
        ChipLogProgress(Zcl, "Failed to dispatch command, TLVError=%" CHIP_ERROR_FORMAT, TLVError.Format());
        return Protocols::InteractionModel::Status::InvalidCommand;
    }

    // We use success as a marker that no special handling is required
    // This is to avoid having a std::optional which uses slightly more code.
    return Protocols::InteractionModel::Status::Success;
}

} // namespace OperationalCredentials

namespace TargetNavigator {

Protocols::InteractionModel::Status DispatchServerCommand(CommandHandler * apCommandObj, const ConcreteCommandPath & aCommandPath,
                                                          TLV::TLVReader & aDataTlv)
{
    CHIP_ERROR TLVError = CHIP_NO_ERROR;
    bool wasHandled     = false;
    {
        switch (aCommandPath.mCommandId)
        {
        case Commands::NavigateTarget::Id: {
            Commands::NavigateTarget::DecodableType commandData;
            TLVError = DataModel::Decode(aDataTlv, commandData);
            if (TLVError == CHIP_NO_ERROR)
            {
                wasHandled = emberAfTargetNavigatorClusterNavigateTargetCallback(apCommandObj, aCommandPath, commandData);
            }
            break;
        }
        default: {
            // Unrecognized command ID, error status will apply.
            ChipLogError(Zcl, "Unknown command " ChipLogFormatMEI " for cluster " ChipLogFormatMEI,
                         ChipLogValueMEI(aCommandPath.mCommandId), ChipLogValueMEI(aCommandPath.mClusterId));
            return Protocols::InteractionModel::Status::UnsupportedCommand;
        }
        }
    }

    if (CHIP_NO_ERROR != TLVError || !wasHandled)
    {
        ChipLogProgress(Zcl, "Failed to dispatch command, TLVError=%" CHIP_ERROR_FORMAT, TLVError.Format());
        return Protocols::InteractionModel::Status::InvalidCommand;
    }

    // We use success as a marker that no special handling is required
    // This is to avoid having a std::optional which uses slightly more code.
    return Protocols::InteractionModel::Status::Success;
}

} // namespace TargetNavigator

} // namespace Clusters

void DispatchSingleClusterCommand(const ConcreteCommandPath & aCommandPath, TLV::TLVReader & aReader, CommandHandler * apCommandObj)
{
    Protocols::InteractionModel::Status errorStatus = Protocols::InteractionModel::Status::Success;

    switch (aCommandPath.mClusterId)
    {
    case Clusters::AccountLogin::Id:
        errorStatus = Clusters::AccountLogin::DispatchServerCommand(apCommandObj, aCommandPath, aReader);
        break;
    case Clusters::ApplicationLauncher::Id:
        errorStatus = Clusters::ApplicationLauncher::DispatchServerCommand(apCommandObj, aCommandPath, aReader);
        break;
    case Clusters::AudioOutput::Id:
        errorStatus = Clusters::AudioOutput::DispatchServerCommand(apCommandObj, aCommandPath, aReader);
        break;
    case Clusters::Channel::Id:
        errorStatus = Clusters::Channel::DispatchServerCommand(apCommandObj, aCommandPath, aReader);
        break;
    case Clusters::ContentControl::Id:
        errorStatus = Clusters::ContentControl::DispatchServerCommand(apCommandObj, aCommandPath, aReader);
        break;
    case Clusters::ContentLauncher::Id:
        errorStatus = Clusters::ContentLauncher::DispatchServerCommand(apCommandObj, aCommandPath, aReader);
        break;
    case Clusters::DiagnosticLogs::Id:
        errorStatus = Clusters::DiagnosticLogs::DispatchServerCommand(apCommandObj, aCommandPath, aReader);
        break;
    case Clusters::EthernetNetworkDiagnostics::Id:
        errorStatus = Clusters::EthernetNetworkDiagnostics::DispatchServerCommand(apCommandObj, aCommandPath, aReader);
        break;
    case Clusters::GroupKeyManagement::Id:
        errorStatus = Clusters::GroupKeyManagement::DispatchServerCommand(apCommandObj, aCommandPath, aReader);
        break;
    case Clusters::KeypadInput::Id:
        errorStatus = Clusters::KeypadInput::DispatchServerCommand(apCommandObj, aCommandPath, aReader);
        break;
    case Clusters::LevelControl::Id:
        errorStatus = Clusters::LevelControl::DispatchServerCommand(apCommandObj, aCommandPath, aReader);
        break;
    case Clusters::LowPower::Id:
        errorStatus = Clusters::LowPower::DispatchServerCommand(apCommandObj, aCommandPath, aReader);
        break;
    case Clusters::MediaInput::Id:
        errorStatus = Clusters::MediaInput::DispatchServerCommand(apCommandObj, aCommandPath, aReader);
        break;
    case Clusters::MediaPlayback::Id:
        errorStatus = Clusters::MediaPlayback::DispatchServerCommand(apCommandObj, aCommandPath, aReader);
        break;
    case Clusters::Messages::Id:
        errorStatus = Clusters::Messages::DispatchServerCommand(apCommandObj, aCommandPath, aReader);
        break;
    case Clusters::OnOff::Id:
        errorStatus = Clusters::OnOff::DispatchServerCommand(apCommandObj, aCommandPath, aReader);
        break;
    case Clusters::OperationalCredentials::Id:
        errorStatus = Clusters::OperationalCredentials::DispatchServerCommand(apCommandObj, aCommandPath, aReader);
        break;
    case Clusters::TargetNavigator::Id:
        errorStatus = Clusters::TargetNavigator::DispatchServerCommand(apCommandObj, aCommandPath, aReader);
        break;
    default:
        ChipLogError(Zcl, "Unknown cluster " ChipLogFormatMEI, ChipLogValueMEI(aCommandPath.mClusterId));
        errorStatus = Protocols::InteractionModel::Status::UnsupportedCluster;
        break;
    }

    if (errorStatus != Protocols::InteractionModel::Status::Success)
    {
        apCommandObj->AddStatus(aCommandPath, errorStatus);
    }
}

} // namespace app
} // namespace chip
